
RGB_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  20000000  080047e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
  8 .bss          00000a68  20000184  20000184  00020184  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000bec  20000bec  00020184  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020f6e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000041ef  00000000  00000000  00041122  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009d1e  00000000  00000000  00045311  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  0004f030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  0004fe30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009337  00000000  00000000  00050de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005318  00000000  00000000  0005a11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005f437  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002fbc  00000000  00000000  0005f4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00062470  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  0006250c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000184 	.word	0x20000184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800465c 	.word	0x0800465c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000188 	.word	0x20000188
 80001cc:	0800465c 	.word	0x0800465c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_InitTick+0x24>)
{
 8000584:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f894 	bl	80006bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	4621      	mov	r1, r4
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f84e 	bl	800063c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	200000e8 	.word	0x200000e8

080005a8 <HAL_Init>:
{
 80005a8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_Init+0x30>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005b2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f827 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ffd8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005d0:	f002 fd8b 	bl	80030ea <HAL_MspInit>
}
 80005d4:	2000      	movs	r0, #0
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	40023c00 	.word	0x40023c00

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000354 	.word	0x20000354

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000354 	.word	0x20000354

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005fa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
  uint32_t wait = Delay;
 8000600:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000604:	4605      	mov	r5, r0
  {
     wait++;
 8000606:	bf18      	it	ne
 8000608:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800060a:	f7ff ffef 	bl	80005ec <HAL_GetTick>
 800060e:	1b40      	subs	r0, r0, r5
 8000610:	42a0      	cmp	r0, r4
 8000612:	d3fa      	bcc.n	800060a <HAL_Delay+0x12>
  {
  }
}
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}

08000618 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	68dc      	ldr	r4, [r3, #12]
 8000642:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000646:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	2b04      	cmp	r3, #4
 800064e:	bf28      	it	cs
 8000650:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 0501 	mov.w	r5, #1
 8000658:	fa05 f303 	lsl.w	r3, r5, r3
 800065c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	4019      	ands	r1, r3
 8000668:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066a:	fa05 f404 	lsl.w	r4, r5, r4
 800066e:	3c01      	subs	r4, #1
 8000670:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000672:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	ea42 0201 	orr.w	r2, r2, r1
 8000678:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	bfaf      	iteee	ge
 800067e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	f000 000f 	andlt.w	r0, r0, #15
 8000686:	4b06      	ldrlt	r3, [pc, #24]	; (80006a0 <HAL_NVIC_SetPriority+0x64>)
 8000688:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	bfa5      	ittet	ge
 800068c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000690:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a4:	0942      	lsrs	r2, r0, #5
 80006a6:	2301      	movs	r3, #1
 80006a8:	f000 001f 	and.w	r0, r0, #31
 80006ac:	fa03 f000 	lsl.w	r0, r3, r0
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <HAL_NVIC_EnableIRQ+0x14>)
 80006b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	3801      	subs	r0, #1
 80006be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c2:	d20a      	bcs.n	80006da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	21f0      	movs	r1, #240	; 0xf0
 80006cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ee:	bf0c      	ite	eq
 80006f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006f4:	f022 0204 	bicne.w	r2, r2, #4
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	4770      	bx	lr
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000700:	4770      	bx	lr

08000702 <HAL_SYSTICK_IRQHandler>:
{
 8000702:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000704:	f7ff fffc 	bl	8000700 <HAL_SYSTICK_Callback>
 8000708:	bd08      	pop	{r3, pc}
	...

0800070c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000710:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000712:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000718:	4a68      	ldr	r2, [pc, #416]	; (80008bc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008c8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000720:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000722:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000728:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000730:	45b6      	cmp	lr, r6
 8000732:	f040 80ae 	bne.w	8000892 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000736:	684c      	ldr	r4, [r1, #4]
 8000738:	f024 0710 	bic.w	r7, r4, #16
 800073c:	2f02      	cmp	r7, #2
 800073e:	d116      	bne.n	800076e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000740:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000744:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800074c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000750:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000754:	f04f 0c0f 	mov.w	ip, #15
 8000758:	fa0c fc0b 	lsl.w	ip, ip, fp
 800075c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000760:	690d      	ldr	r5, [r1, #16]
 8000762:	fa05 f50b 	lsl.w	r5, r5, fp
 8000766:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800076a:	f8ca 5020 	str.w	r5, [sl, #32]
 800076e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000772:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000774:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000778:	fa05 f50a 	lsl.w	r5, r5, sl
 800077c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000782:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000786:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800078a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000792:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	d811      	bhi.n	80007bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000798:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800079a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079e:	68cf      	ldr	r7, [r1, #12]
 80007a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007b4:	409f      	lsls	r7, r3
 80007b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c0:	688f      	ldr	r7, [r1, #8]
 80007c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80007c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ca:	00e5      	lsls	r5, r4, #3
 80007cc:	d561      	bpl.n	8000892 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	f04f 0b00 	mov.w	fp, #0
 80007d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80007d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	4d39      	ldr	r5, [pc, #228]	; (80008c0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007ec:	9703      	str	r7, [sp, #12]
 80007ee:	9f03      	ldr	r7, [sp, #12]
 80007f0:	f023 0703 	bic.w	r7, r3, #3
 80007f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000800:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000804:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000808:	f04f 0e0f 	mov.w	lr, #15
 800080c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000810:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000812:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	d043      	beq.n	80008a0 <HAL_GPIO_Init+0x194>
 8000818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800081c:	42a8      	cmp	r0, r5
 800081e:	d041      	beq.n	80008a4 <HAL_GPIO_Init+0x198>
 8000820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000824:	42a8      	cmp	r0, r5
 8000826:	d03f      	beq.n	80008a8 <HAL_GPIO_Init+0x19c>
 8000828:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082c:	42a8      	cmp	r0, r5
 800082e:	d03d      	beq.n	80008ac <HAL_GPIO_Init+0x1a0>
 8000830:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000834:	42a8      	cmp	r0, r5
 8000836:	d03b      	beq.n	80008b0 <HAL_GPIO_Init+0x1a4>
 8000838:	4548      	cmp	r0, r9
 800083a:	d03b      	beq.n	80008b4 <HAL_GPIO_Init+0x1a8>
 800083c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000840:	42a8      	cmp	r0, r5
 8000842:	d039      	beq.n	80008b8 <HAL_GPIO_Init+0x1ac>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	bf14      	ite	ne
 800084c:	2508      	movne	r5, #8
 800084e:	2507      	moveq	r5, #7
 8000850:	fa05 f50c 	lsl.w	r5, r5, ip
 8000854:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000858:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800085a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800085c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000866:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000868:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800086a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000874:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000876:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000878:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800087a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000882:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000884:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000886:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000888:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf54      	ite	pl
 800088c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800088e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000890:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	3301      	adds	r3, #1
 8000894:	2b10      	cmp	r3, #16
 8000896:	f47f af44 	bne.w	8000722 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800089a:	b005      	add	sp, #20
 800089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a0:	465d      	mov	r5, fp
 80008a2:	e7d5      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a4:	2501      	movs	r5, #1
 80008a6:	e7d3      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a8:	2502      	movs	r5, #2
 80008aa:	e7d1      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008ac:	2503      	movs	r5, #3
 80008ae:	e7cf      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b0:	2504      	movs	r5, #4
 80008b2:	e7cd      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b4:	2505      	movs	r5, #5
 80008b6:	e7cb      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b8:	2506      	movs	r5, #6
 80008ba:	e7c9      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021400 	.word	0x40021400

080008cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008cc:	6903      	ldr	r3, [r0, #16]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d0:	bf14      	ite	ne
 80008d2:	2001      	movne	r0, #1
 80008d4:	2000      	moveq	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	b10a      	cbz	r2, 80008de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008da:	6181      	str	r1, [r0, #24]
 80008dc:	4770      	bx	lr
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	e7fb      	b.n	80008da <HAL_GPIO_WritePin+0x2>

080008e2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008e2:	6943      	ldr	r3, [r0, #20]
 80008e4:	4059      	eors	r1, r3
 80008e6:	6141      	str	r1, [r0, #20]
 80008e8:	4770      	bx	lr

080008ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80008ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80008ec:	4606      	mov	r6, r0
{ 
 80008ee:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d064      	beq.n	80009be <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80008f4:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80008f6:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008f8:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80008fc:	f002 fd26 	bl	800334c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000900:	f854 0b10 	ldr.w	r0, [r4], #16
 8000904:	f001 fb1e 	bl	8001f44 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090a:	466d      	mov	r5, sp
 800090c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000916:	e885 0003 	stmia.w	r5, {r0, r1}
 800091a:	1d37      	adds	r7, r6, #4
 800091c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000920:	6830      	ldr	r0, [r6, #0]
 8000922:	f001 facf 	bl	8001ec4 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000926:	2100      	movs	r1, #0
 8000928:	6830      	ldr	r0, [r6, #0]
 800092a:	f001 fb11 	bl	8001f50 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800092e:	2100      	movs	r1, #0
 8000930:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000932:	4632      	mov	r2, r6
 8000934:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000938:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800093a:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 800093c:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000940:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8000942:	3101      	adds	r1, #1
 8000944:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8000946:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800094a:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 800094e:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000950:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8000952:	64d0      	str	r0, [r2, #76]	; 0x4c
 8000954:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000958:	d1f0      	bne.n	800093c <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 800095a:	2200      	movs	r2, #0
 800095c:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8000960:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000962:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8000966:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 800096a:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 800096c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8000970:	3201      	adds	r2, #1
 8000972:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8000974:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000978:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 800097c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000980:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000984:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000988:	6041      	str	r1, [r0, #4]
 800098a:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 800098e:	d1e8      	bne.n	8000962 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000992:	466d      	mov	r5, sp
 8000994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800099e:	e885 0003 	stmia.w	r5, {r0, r1}
 80009a2:	4670      	mov	r0, lr
 80009a4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009a8:	f001 faea 	bl	8001f80 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80009b2:	6830      	ldr	r0, [r6, #0]
 80009b4:	f001 fe07 	bl	80025c6 <USB_DevDisconnect>
 return HAL_OK;
 80009b8:	2000      	movs	r0, #0
}
 80009ba:	b00b      	add	sp, #44	; 0x2c
 80009bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
 80009c0:	e7fb      	b.n	80009ba <HAL_PCD_Init+0xd0>

080009c2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80009c2:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80009c6:	2b01      	cmp	r3, #1
{ 
 80009c8:	b510      	push	{r4, lr}
 80009ca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80009cc:	d00c      	beq.n	80009e8 <HAL_PCD_Start+0x26>
 80009ce:	2301      	movs	r3, #1
 80009d0:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80009d4:	6800      	ldr	r0, [r0, #0]
 80009d6:	f001 fdea 	bl	80025ae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009da:	6820      	ldr	r0, [r4, #0]
 80009dc:	f001 faac 	bl	8001f38 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80009e0:	2000      	movs	r0, #0
 80009e2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80009e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80009e8:	2002      	movs	r0, #2
}
 80009ea:	bd10      	pop	{r4, pc}

080009ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80009f0:	f8d0 9000 	ldr.w	r9, [r0]
{
 80009f4:	b087      	sub	sp, #28
 80009f6:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80009f8:	4648      	mov	r0, r9
 80009fa:	f001 fe1e 	bl	800263a <USB_GetMode>
 80009fe:	9002      	str	r0, [sp, #8]
 8000a00:	2800      	cmp	r0, #0
 8000a02:	f040 812e 	bne.w	8000c62 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	f001 fde9 	bl	80025de <USB_ReadInterrupts>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	f000 8128 	beq.w	8000c62 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	f001 fde3 	bl	80025de <USB_ReadInterrupts>
 8000a18:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a1a:	bf48      	it	mi
 8000a1c:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a1e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a20:	bf42      	ittt	mi
 8000a22:	6953      	ldrmi	r3, [r2, #20]
 8000a24:	f003 0302 	andmi.w	r3, r3, #2
 8000a28:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a2a:	f001 fdd8 	bl	80025de <USB_ReadInterrupts>
 8000a2e:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000a32:	d00a      	beq.n	8000a4a <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	f001 fdd6 	bl	80025e6 <USB_ReadDevAllOutEpInterrupt>
 8000a3a:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8000a3e:	4607      	mov	r7, r0
 8000a40:	46a2      	mov	sl, r4
      epnum = 0U;
 8000a42:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a44:	2f00      	cmp	r7, #0
 8000a46:	f040 810f 	bne.w	8000c68 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000a4a:	6820      	ldr	r0, [r4, #0]
 8000a4c:	f001 fdc7 	bl	80025de <USB_ReadInterrupts>
 8000a50:	0341      	lsls	r1, r0, #13
 8000a52:	d50b      	bpl.n	8000a6c <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000a54:	6820      	ldr	r0, [r4, #0]
 8000a56:	f001 fdce 	bl	80025f6 <USB_ReadDevAllInEpInterrupt>
 8000a5a:	4626      	mov	r6, r4
 8000a5c:	9003      	str	r0, [sp, #12]
 8000a5e:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8000a62:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a64:	9b03      	ldr	r3, [sp, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 813f 	bne.w	8000cea <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	f001 fdb6 	bl	80025de <USB_ReadInterrupts>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	da0d      	bge.n	8000a92 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a76:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000a7a:	f023 0301 	bic.w	r3, r3, #1
 8000a7e:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000a82:	4620      	mov	r0, r4
 8000a84:	f002 fce2 	bl	800344c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	6953      	ldr	r3, [r2, #20]
 8000a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a90:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f001 fda3 	bl	80025de <USB_ReadInterrupts>
 8000a98:	0506      	lsls	r6, r0, #20
 8000a9a:	d50b      	bpl.n	8000ab4 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a9c:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000aa0:	07d8      	lsls	r0, r3, #31
 8000aa2:	d502      	bpl.n	8000aaa <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f002 fcb9 	bl	800341c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6953      	ldr	r3, [r2, #20]
 8000aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab2:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000ab4:	6820      	ldr	r0, [r4, #0]
 8000ab6:	f001 fd92 	bl	80025de <USB_ReadInterrupts>
 8000aba:	04c1      	lsls	r1, r0, #19
 8000abc:	d537      	bpl.n	8000b2e <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000abe:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000ac2:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000ac4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000acc:	2110      	movs	r1, #16
 8000ace:	f001 faf3 	bl	80020b8 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ad2:	6861      	ldr	r1, [r4, #4]
 8000ad4:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000ad8:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ada:	9802      	ldr	r0, [sp, #8]
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f040 8192 	bne.w	8000e06 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000ae8:	69f3      	ldr	r3, [r6, #28]
 8000aea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000aee:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000af0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 818f 	beq.w	8000e16 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000af8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000afc:	f043 030b 	orr.w	r3, r3, #11
 8000b00:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000b04:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000b06:	f043 030b 	orr.w	r3, r3, #11
 8000b0a:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b0c:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b10:	7c21      	ldrb	r1, [r4, #16]
 8000b12:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000b18:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b1c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b20:	f001 fdaa 	bl	8002678 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	6953      	ldr	r3, [r2, #20]
 8000b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b2e:	6820      	ldr	r0, [r4, #0]
 8000b30:	f001 fd55 	bl	80025de <USB_ReadInterrupts>
 8000b34:	0482      	lsls	r2, r0, #18
 8000b36:	d51d      	bpl.n	8000b74 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	f001 fd82 	bl	8002642 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000b3e:	6820      	ldr	r0, [r4, #0]
 8000b40:	68c3      	ldr	r3, [r0, #12]
 8000b42:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b46:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b48:	f001 fadf 	bl	800210a <USB_GetDevSpeed>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f040 816b 	bne.w	8000e28 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b52:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000b54:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5a:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b5c:	68d3      	ldr	r3, [r2, #12]
 8000b5e:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000b62:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b64:	4620      	mov	r0, r4
 8000b66:	f002 fc48 	bl	80033fa <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b6a:	6822      	ldr	r2, [r4, #0]
 8000b6c:	6953      	ldr	r3, [r2, #20]
 8000b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b72:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b74:	6820      	ldr	r0, [r4, #0]
 8000b76:	f001 fd32 	bl	80025de <USB_ReadInterrupts>
 8000b7a:	06c3      	lsls	r3, r0, #27
 8000b7c:	d52b      	bpl.n	8000bd6 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b7e:	6822      	ldr	r2, [r4, #0]
 8000b80:	6993      	ldr	r3, [r2, #24]
 8000b82:	f023 0310 	bic.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b88:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b8c:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b90:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b92:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b96:	f040 81a8 	bne.w	8000eea <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b9e:	421e      	tst	r6, r3
 8000ba0:	d014      	beq.n	8000bcc <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000ba2:	271c      	movs	r7, #28
 8000ba4:	fb07 4708 	mla	r7, r7, r8, r4
 8000ba8:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000bac:	4632      	mov	r2, r6
 8000bae:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000bb2:	4648      	mov	r0, r9
 8000bb4:	f001 fca5 	bl	8002502 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bb8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000bbc:	4433      	add	r3, r6
 8000bbe:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bc2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bc6:	441e      	add	r6, r3
 8000bc8:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bcc:	6822      	ldr	r2, [r4, #0]
 8000bce:	6993      	ldr	r3, [r2, #24]
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000bd6:	6820      	ldr	r0, [r4, #0]
 8000bd8:	f001 fd01 	bl	80025de <USB_ReadInterrupts>
 8000bdc:	0707      	lsls	r7, r0, #28
 8000bde:	d507      	bpl.n	8000bf0 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000be0:	4620      	mov	r0, r4
 8000be2:	f002 fc06 	bl	80033f2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	6953      	ldr	r3, [r2, #20]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f001 fcf4 	bl	80025de <USB_ReadInterrupts>
 8000bf6:	02c6      	lsls	r6, r0, #11
 8000bf8:	d508      	bpl.n	8000c0c <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000bfa:	b2e9      	uxtb	r1, r5
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f002 fc2d 	bl	800345c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c02:	6822      	ldr	r2, [r4, #0]
 8000c04:	6953      	ldr	r3, [r2, #20]
 8000c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c0c:	6820      	ldr	r0, [r4, #0]
 8000c0e:	f001 fce6 	bl	80025de <USB_ReadInterrupts>
 8000c12:	0280      	lsls	r0, r0, #10
 8000c14:	d508      	bpl.n	8000c28 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000c16:	b2e9      	uxtb	r1, r5
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f002 fc1b 	bl	8003454 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c1e:	6822      	ldr	r2, [r4, #0]
 8000c20:	6953      	ldr	r3, [r2, #20]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c26:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	f001 fcd8 	bl	80025de <USB_ReadInterrupts>
 8000c2e:	0041      	lsls	r1, r0, #1
 8000c30:	d507      	bpl.n	8000c42 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c32:	4620      	mov	r0, r4
 8000c34:	f002 fc16 	bl	8003464 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c38:	6822      	ldr	r2, [r4, #0]
 8000c3a:	6953      	ldr	r3, [r2, #20]
 8000c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c40:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c42:	6820      	ldr	r0, [r4, #0]
 8000c44:	f001 fccb 	bl	80025de <USB_ReadInterrupts>
 8000c48:	0742      	lsls	r2, r0, #29
 8000c4a:	d50a      	bpl.n	8000c62 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c50:	076b      	lsls	r3, r5, #29
 8000c52:	d502      	bpl.n	8000c5a <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c54:	4620      	mov	r0, r4
 8000c56:	f002 fc09 	bl	800346c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4315      	orrs	r5, r2
 8000c60:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c62:	b007      	add	sp, #28
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000c68:	07f8      	lsls	r0, r7, #31
 8000c6a:	d538      	bpl.n	8000cde <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c6c:	fa5f fb85 	uxtb.w	fp, r5
 8000c70:	4659      	mov	r1, fp
 8000c72:	6820      	ldr	r0, [r4, #0]
 8000c74:	f001 fcc7 	bl	8002606 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c78:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c7c:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c7e:	d021      	beq.n	8000cc4 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000c80:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c82:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000c84:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c86:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000c88:	d10c      	bne.n	8000ca4 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000c8a:	6931      	ldr	r1, [r6, #16]
 8000c8c:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c90:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000c94:	1a41      	subs	r1, r0, r1
 8000c96:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000c9a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000c9e:	4408      	add	r0, r1
 8000ca0:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000ca4:	4659      	mov	r1, fp
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f002 fb92 	bl	80033d0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000cac:	6921      	ldr	r1, [r4, #16]
 8000cae:	2901      	cmp	r1, #1
 8000cb0:	d108      	bne.n	8000cc4 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000cb2:	b93d      	cbnz	r5, 8000cc4 <HAL_PCD_IRQHandler+0x2d8>
 8000cb4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000cb8:	b922      	cbnz	r2, 8000cc4 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000cba:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	f001 fcda 	bl	8002678 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000cc4:	f018 0f08 	tst.w	r8, #8
 8000cc8:	d004      	beq.n	8000cd4 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f002 fb7a 	bl	80033c4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000cd4:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000cd8:	bf1c      	itt	ne
 8000cda:	2310      	movne	r3, #16
 8000cdc:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000cde:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000ce0:	087f      	lsrs	r7, r7, #1
 8000ce2:	3620      	adds	r6, #32
 8000ce4:	f10a 0a1c 	add.w	sl, sl, #28
 8000ce8:	e6ac      	b.n	8000a44 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000cea:	9b03      	ldr	r3, [sp, #12]
 8000cec:	07da      	lsls	r2, r3, #31
 8000cee:	d558      	bpl.n	8000da2 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000cf0:	fa5f fb85 	uxtb.w	fp, r5
 8000cf4:	4659      	mov	r1, fp
 8000cf6:	6820      	ldr	r0, [r4, #0]
 8000cf8:	f001 fc8f 	bl	800261a <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000cfc:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000cfe:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d00:	d520      	bpl.n	8000d44 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d02:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000d06:	2101      	movs	r1, #1
 8000d08:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d0a:	ea23 0301 	bic.w	r3, r3, r1
 8000d0e:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d12:	2301      	movs	r3, #1
 8000d14:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d1c:	bf01      	itttt	eq
 8000d1e:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000d20:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000d22:	189b      	addeq	r3, r3, r2
 8000d24:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d26:	4659      	mov	r1, fp
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f002 fb5a 	bl	80033e2 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d2e:	6921      	ldr	r1, [r4, #16]
 8000d30:	2901      	cmp	r1, #1
 8000d32:	d107      	bne.n	8000d44 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d34:	b935      	cbnz	r5, 8000d44 <HAL_PCD_IRQHandler+0x358>
 8000d36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d38:	b923      	cbnz	r3, 8000d44 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d3a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d3e:	6820      	ldr	r0, [r4, #0]
 8000d40:	f001 fc9a 	bl	8002678 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d44:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d46:	bf44      	itt	mi
 8000d48:	2308      	movmi	r3, #8
 8000d4a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d4e:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d50:	bf44      	itt	mi
 8000d52:	2310      	movmi	r3, #16
 8000d54:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d58:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d5a:	bf44      	itt	mi
 8000d5c:	2340      	movmi	r3, #64	; 0x40
 8000d5e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d62:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d64:	bf44      	itt	mi
 8000d66:	2302      	movmi	r3, #2
 8000d68:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d6c:	063f      	lsls	r7, r7, #24
 8000d6e:	d518      	bpl.n	8000da2 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d74:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000d76:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000d78:	1aff      	subs	r7, r7, r3
 8000d7a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	bf28      	it	cs
 8000d80:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d82:	9b04      	ldr	r3, [sp, #16]
 8000d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000d88:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d8c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d90:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d94:	9305      	str	r3, [sp, #20]
 8000d96:	9b05      	ldr	r3, [sp, #20]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4553      	cmp	r3, sl
 8000d9e:	d808      	bhi.n	8000db2 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000da0:	b32f      	cbz	r7, 8000dee <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000da2:	9b03      	ldr	r3, [sp, #12]
 8000da4:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000da6:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000da8:	9303      	str	r3, [sp, #12]
 8000daa:	361c      	adds	r6, #28
 8000dac:	f108 0820 	add.w	r8, r8, #32
 8000db0:	e658      	b.n	8000a64 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000db2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000db4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d9f2      	bls.n	8000da0 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_PCD_IRQHandler+0x3b4>
 8000dbe:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dc0:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	bf28      	it	cs
 8000dc8:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dca:	7c23      	ldrb	r3, [r4, #16]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	465a      	mov	r2, fp
 8000dd0:	b2bb      	uxth	r3, r7
 8000dd2:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000dd4:	f001 fb81 	bl	80024da <USB_WritePacket>
    ep->xfer_buff  += len;
 8000dd8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000dda:	443b      	add	r3, r7
 8000ddc:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000dde:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000de0:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000de4:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000de6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000dea:	6533      	str	r3, [r6, #80]	; 0x50
 8000dec:	e7d3      	b.n	8000d96 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dee:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000df0:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000df2:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000df6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000dfa:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dfc:	ea23 0302 	bic.w	r3, r3, r2
 8000e00:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000e04:	e7cd      	b.n	8000da2 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e06:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000e08:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0a:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000e0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e10:	9002      	str	r0, [sp, #8]
 8000e12:	3320      	adds	r3, #32
 8000e14:	e661      	b.n	8000ada <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000e16:	6973      	ldr	r3, [r6, #20]
 8000e18:	f043 030b 	orr.w	r3, r3, #11
 8000e1c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e1e:	6933      	ldr	r3, [r6, #16]
 8000e20:	f043 030b 	orr.w	r3, r3, #11
 8000e24:	6133      	str	r3, [r6, #16]
 8000e26:	e671      	b.n	8000b0c <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000e30:	f000 fbdc 	bl	80015ec <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <HAL_PCD_IRQHandler+0x51c>)
 8000e36:	4a35      	ldr	r2, [pc, #212]	; (8000f0c <HAL_PCD_IRQHandler+0x520>)
 8000e38:	4403      	add	r3, r0
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	d804      	bhi.n	8000e4a <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	e68c      	b.n	8000b64 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_PCD_IRQHandler+0x524>)
 8000e4c:	4931      	ldr	r1, [pc, #196]	; (8000f14 <HAL_PCD_IRQHandler+0x528>)
 8000e4e:	4402      	add	r2, r0
 8000e50:	428a      	cmp	r2, r1
 8000e52:	d803      	bhi.n	8000e5c <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e5a:	e7f4      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000e5c:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e60:	492d      	ldr	r1, [pc, #180]	; (8000f18 <HAL_PCD_IRQHandler+0x52c>)
 8000e62:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e66:	428a      	cmp	r2, r1
 8000e68:	d803      	bhi.n	8000e72 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e70:	e7e9      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e72:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e76:	4929      	ldr	r1, [pc, #164]	; (8000f1c <HAL_PCD_IRQHandler+0x530>)
 8000e78:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d803      	bhi.n	8000e88 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e86:	e7de      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_PCD_IRQHandler+0x534>)
 8000e8a:	4926      	ldr	r1, [pc, #152]	; (8000f24 <HAL_PCD_IRQHandler+0x538>)
 8000e8c:	4402      	add	r2, r0
 8000e8e:	428a      	cmp	r2, r1
 8000e90:	d803      	bhi.n	8000e9a <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e98:	e7d5      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_PCD_IRQHandler+0x53c>)
 8000e9c:	4923      	ldr	r1, [pc, #140]	; (8000f2c <HAL_PCD_IRQHandler+0x540>)
 8000e9e:	4402      	add	r2, r0
 8000ea0:	428a      	cmp	r2, r1
 8000ea2:	d803      	bhi.n	8000eac <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000eaa:	e7cc      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_PCD_IRQHandler+0x544>)
 8000eae:	4921      	ldr	r1, [pc, #132]	; (8000f34 <HAL_PCD_IRQHandler+0x548>)
 8000eb0:	4402      	add	r2, r0
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d803      	bhi.n	8000ebe <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ebc:	e7c3      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000ebe:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000ec2:	491d      	ldr	r1, [pc, #116]	; (8000f38 <HAL_PCD_IRQHandler+0x54c>)
 8000ec4:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	d803      	bhi.n	8000ed4 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ed2:	e7b8      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_PCD_IRQHandler+0x550>)
 8000ed6:	491a      	ldr	r1, [pc, #104]	; (8000f40 <HAL_PCD_IRQHandler+0x554>)
 8000ed8:	4402      	add	r2, r0
 8000eda:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	bf94      	ite	ls
 8000ee0:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ee4:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000ee8:	e7ad      	b.n	8000e46 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	f47f ae6e 	bne.w	8000bcc <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000ef6:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ef8:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000efa:	f001 fb02 	bl	8002502 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000efe:	fb07 4708 	mla	r7, r7, r8, r4
 8000f02:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f06:	e65c      	b.n	8000bc2 <HAL_PCD_IRQHandler+0x1d6>
 8000f08:	ff275340 	.word	0xff275340
 8000f0c:	000c34ff 	.word	0x000c34ff
 8000f10:	ff1b1e40 	.word	0xff1b1e40
 8000f14:	000f423f 	.word	0x000f423f
 8000f18:	00124f7f 	.word	0x00124f7f
 8000f1c:	0013d61f 	.word	0x0013d61f
 8000f20:	fee5b660 	.word	0xfee5b660
 8000f24:	0016e35f 	.word	0x0016e35f
 8000f28:	feced300 	.word	0xfeced300
 8000f2c:	001b773f 	.word	0x001b773f
 8000f30:	feb35bc0 	.word	0xfeb35bc0
 8000f34:	002191bf 	.word	0x002191bf
 8000f38:	0038751f 	.word	0x0038751f
 8000f3c:	fe5954e0 	.word	0xfe5954e0
 8000f40:	00419cdf 	.word	0x00419cdf

08000f44 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f44:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000f48:	2b01      	cmp	r3, #1
{
 8000f4a:	b510      	push	{r4, lr}
 8000f4c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f4e:	d009      	beq.n	8000f64 <HAL_PCD_SetAddress+0x20>
 8000f50:	2301      	movs	r3, #1
 8000f52:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000f56:	6800      	ldr	r0, [r0, #0]
 8000f58:	f001 fb19 	bl	800258e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f64:	2002      	movs	r0, #2
}
 8000f66:	bd10      	pop	{r4, pc}

08000f68 <HAL_PCD_EP_Open>:
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000f6a:	b24e      	sxtb	r6, r1
 8000f6c:	2e00      	cmp	r6, #0
{
 8000f6e:	4604      	mov	r4, r0
 8000f70:	f04f 051c 	mov.w	r5, #28
 8000f74:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f78:	bfb5      	itete	lt
 8000f7a:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f7e:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f82:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f84:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000f88:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000f8a:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000f8c:	bfb8      	it	lt
 8000f8e:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f90:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f92:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f94:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000f98:	bf04      	itt	eq
 8000f9a:	2300      	moveq	r3, #0
 8000f9c:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000f9e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fa0:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fa2:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000fa6:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d009      	beq.n	8000fc0 <HAL_PCD_EP_Open+0x58>
 8000fac:	2301      	movs	r3, #1
 8000fae:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	f001 f8c4 	bl	8002140 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000fc0:	2002      	movs	r0, #2
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}

08000fc4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000fc4:	b24b      	sxtb	r3, r1
 8000fc6:	2b00      	cmp	r3, #0
{  
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	f04f 021c 	mov.w	r2, #28
 8000fce:	4604      	mov	r4, r0
 8000fd0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fd4:	bfb5      	itete	lt
 8000fd6:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fda:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fde:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fe0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fe4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000fe6:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fe8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fea:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d009      	beq.n	8001006 <HAL_PCD_EP_Close+0x42>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	f001 f8e0 	bl	80021be <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000ffe:	2000      	movs	r0, #0
 8001000:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001004:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001006:	2002      	movs	r0, #2
}
 8001008:	bd10      	pop	{r4, pc}

0800100a <HAL_PCD_EP_Receive>:
{
 800100a:	b538      	push	{r3, r4, r5, lr}
 800100c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001010:	241c      	movs	r4, #28
 8001012:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001016:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800101a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 800101e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8001022:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001024:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001028:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 800102c:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001030:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8001034:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001036:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001038:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800103a:	bf08      	it	eq
 800103c:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001040:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001042:	b91d      	cbnz	r5, 800104c <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001044:	f001 f9dc 	bl	8002400 <USB_EP0StartXfer>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800104c:	f001 f912 	bl	8002274 <USB_EPStartXfer>
 8001050:	e7fa      	b.n	8001048 <HAL_PCD_EP_Receive+0x3e>

08001052 <HAL_PCD_EP_Transmit>:
{
 8001052:	b538      	push	{r3, r4, r5, lr}
 8001054:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001058:	241c      	movs	r4, #28
 800105a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800105e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001062:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001064:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 800106a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 800106c:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800106e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001072:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8001076:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001078:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800107a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800107c:	bf08      	it	eq
 800107e:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001080:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001082:	b91d      	cbnz	r5, 800108c <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001084:	f001 f9bc 	bl	8002400 <USB_EP0StartXfer>
}
 8001088:	2000      	movs	r0, #0
 800108a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800108c:	f001 f8f2 	bl	8002274 <USB_EPStartXfer>
 8001090:	e7fa      	b.n	8001088 <HAL_PCD_EP_Transmit+0x36>

08001092 <HAL_PCD_EP_SetStall>:
{
 8001092:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001094:	b24b      	sxtb	r3, r1
 8001096:	2b00      	cmp	r3, #0
 8001098:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800109c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010a0:	bfb5      	itete	lt
 80010a2:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010a6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010aa:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010ac:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80010b0:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010b2:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010b4:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010b6:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010b8:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ba:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010bc:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80010c0:	4293      	cmp	r3, r2
{
 80010c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80010c4:	d00f      	beq.n	80010e6 <HAL_PCD_EP_SetStall+0x54>
 80010c6:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	f001 fa27 	bl	800251e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80010d0:	b92d      	cbnz	r5, 80010de <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80010d2:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80010d6:	7c21      	ldrb	r1, [r4, #16]
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f001 facd 	bl	8002678 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80010de:	2000      	movs	r0, #0
 80010e0:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80010e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010e6:	2002      	movs	r0, #2
}
 80010e8:	bd38      	pop	{r3, r4, r5, pc}

080010ea <HAL_PCD_EP_ClrStall>:
{
 80010ea:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010ec:	b24b      	sxtb	r3, r1
 80010ee:	2b00      	cmp	r3, #0
{
 80010f0:	4605      	mov	r5, r0
 80010f2:	f04f 021c 	mov.w	r2, #28
 80010f6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010fa:	bfb5      	itete	lt
 80010fc:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001100:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001104:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001106:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800110a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800110c:	2400      	movs	r4, #0
 800110e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001110:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001112:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001114:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001118:	2b01      	cmp	r3, #1
 800111a:	d009      	beq.n	8001130 <HAL_PCD_EP_ClrStall+0x46>
 800111c:	2301      	movs	r3, #1
 800111e:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001122:	6828      	ldr	r0, [r5, #0]
 8001124:	f001 fa1a 	bl	800255c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001128:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 800112c:	4620      	mov	r0, r4
 800112e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001130:	2002      	movs	r0, #2
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}

08001134 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001134:	6800      	ldr	r0, [r0, #0]
{
 8001136:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001138:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800113a:	b921      	cbnz	r1, 8001146 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 800113c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001140:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8001142:	2000      	movs	r0, #0
 8001144:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001146:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001148:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800114a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800114e:	1e4e      	subs	r6, r1, #1
 8001150:	b2ec      	uxtb	r4, r5
 8001152:	42b4      	cmp	r4, r6
 8001154:	f105 0501 	add.w	r5, r5, #1
 8001158:	db06      	blt.n	8001168 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800115a:	313f      	adds	r1, #63	; 0x3f
 800115c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001164:	6043      	str	r3, [r0, #4]
 8001166:	e7ec      	b.n	8001142 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001168:	3440      	adds	r4, #64	; 0x40
 800116a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800116e:	6864      	ldr	r4, [r4, #4]
 8001170:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001174:	e7ec      	b.n	8001150 <HAL_PCDEx_SetTxFiFo+0x1c>

08001176 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001176:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001178:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800117a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001182:	4604      	mov	r4, r0
 8001184:	b910      	cbnz	r0, 800118c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001186:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001188:	b003      	add	sp, #12
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118c:	6803      	ldr	r3, [r0, #0]
 800118e:	07d8      	lsls	r0, r3, #31
 8001190:	d43b      	bmi.n	800120a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	0799      	lsls	r1, r3, #30
 8001196:	f100 8084 	bmi.w	80012a2 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	071e      	lsls	r6, r3, #28
 800119e:	f100 80c6 	bmi.w	800132e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	075d      	lsls	r5, r3, #29
 80011a6:	d52a      	bpl.n	80011fe <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	4baa      	ldr	r3, [pc, #680]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80011ae:	4dab      	ldr	r5, [pc, #684]	; (800145c <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80011ca:	f7ff fa0f 	bl	80005ec <HAL_GetTick>
 80011ce:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	05da      	lsls	r2, r3, #23
 80011d4:	f140 80cd 	bpl.w	8001372 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	68a3      	ldr	r3, [r4, #8]
 80011da:	4d9f      	ldr	r5, [pc, #636]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 80011dc:	2b01      	cmp	r3, #1
 80011de:	f040 80cf 	bne.w	8001380 <HAL_RCC_OscConfig+0x200>
 80011e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011ea:	f7ff f9ff 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	4d9a      	ldr	r5, [pc, #616]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011f0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011f8:	079b      	lsls	r3, r3, #30
 80011fa:	f140 80e2 	bpl.w	80013c2 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fe:	69a2      	ldr	r2, [r4, #24]
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 80e5 	bne.w	80013d0 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001206:	2000      	movs	r0, #0
 8001208:	e7be      	b.n	8001188 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	4b93      	ldr	r3, [pc, #588]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	f002 020c 	and.w	r2, r2, #12
 8001212:	2a04      	cmp	r2, #4
 8001214:	d007      	beq.n	8001226 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121c:	2a08      	cmp	r2, #8
 800121e:	d10a      	bne.n	8001236 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	025a      	lsls	r2, r3, #9
 8001224:	d507      	bpl.n	8001236 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	d5b1      	bpl.n	8001192 <HAL_RCC_OscConfig+0x12>
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1ae      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
 8001234:	e7a7      	b.n	8001186 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	4d87      	ldr	r5, [pc, #540]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 800123a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123e:	d111      	bne.n	8001264 <HAL_RCC_OscConfig+0xe4>
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001248:	f7ff f9d0 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	4d82      	ldr	r5, [pc, #520]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800124e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	039f      	lsls	r7, r3, #14
 8001254:	d49d      	bmi.n	8001192 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff f9c9 	bl	80005ec <HAL_GetTick>
 800125a:	1b80      	subs	r0, r0, r6
 800125c:	2864      	cmp	r0, #100	; 0x64
 800125e:	d9f7      	bls.n	8001250 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	e791      	b.n	8001188 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001268:	d104      	bne.n	8001274 <HAL_RCC_OscConfig+0xf4>
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	e7e5      	b.n	8001240 <HAL_RCC_OscConfig+0xc0>
 8001274:	682a      	ldr	r2, [r5, #0]
 8001276:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800127a:	602a      	str	r2, [r5, #0]
 800127c:	682a      	ldr	r2, [r5, #0]
 800127e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001282:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1df      	bne.n	8001248 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001288:	f7ff f9b0 	bl	80005ec <HAL_GetTick>
 800128c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	0398      	lsls	r0, r3, #14
 8001292:	f57f af7e 	bpl.w	8001192 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001296:	f7ff f9a9 	bl	80005ec <HAL_GetTick>
 800129a:	1b80      	subs	r0, r0, r6
 800129c:	2864      	cmp	r0, #100	; 0x64
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x10e>
 80012a0:	e7de      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	f012 0f0c 	tst.w	r2, #12
 80012aa:	d007      	beq.n	80012bc <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b2:	2a08      	cmp	r2, #8
 80012b4:	d112      	bne.n	80012dc <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	0259      	lsls	r1, r3, #9
 80012ba:	d40f      	bmi.n	80012dc <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	0792      	lsls	r2, r2, #30
 80012c2:	d503      	bpl.n	80012cc <HAL_RCC_OscConfig+0x14c>
 80012c4:	68e2      	ldr	r2, [r4, #12]
 80012c6:	2a01      	cmp	r2, #1
 80012c8:	f47f af5d 	bne.w	8001186 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	6921      	ldr	r1, [r4, #16]
 80012d0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012d4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e75e      	b.n	800119a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012dc:	68e2      	ldr	r2, [r4, #12]
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_RCC_OscConfig+0x2e0>)
 80012e0:	b1b2      	cbz	r2, 8001310 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012e6:	f7ff f981 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4d5b      	ldr	r5, [pc, #364]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80012ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	079b      	lsls	r3, r3, #30
 80012f2:	d507      	bpl.n	8001304 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	6922      	ldr	r2, [r4, #16]
 80012f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001300:	602b      	str	r3, [r5, #0]
 8001302:	e74a      	b.n	800119a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff f972 	bl	80005ec <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	2802      	cmp	r0, #2
 800130c:	d9ef      	bls.n	80012ee <HAL_RCC_OscConfig+0x16e>
 800130e:	e7a7      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001310:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001312:	f7ff f96b 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4d50      	ldr	r5, [pc, #320]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001318:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	079f      	lsls	r7, r3, #30
 800131e:	f57f af3c 	bpl.w	800119a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff f963 	bl	80005ec <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2802      	cmp	r0, #2
 800132a:	d9f6      	bls.n	800131a <HAL_RCC_OscConfig+0x19a>
 800132c:	e798      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132e:	6962      	ldr	r2, [r4, #20]
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_RCC_OscConfig+0x2e4>)
 8001332:	b17a      	cbz	r2, 8001354 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001338:	f7ff f958 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133c:	4d46      	ldr	r5, [pc, #280]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800133e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001342:	0798      	lsls	r0, r3, #30
 8001344:	f53f af2d 	bmi.w	80011a2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff f950 	bl	80005ec <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x1c0>
 8001352:	e785      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001354:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001356:	f7ff f949 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	4d3f      	ldr	r5, [pc, #252]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800135c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001360:	0799      	lsls	r1, r3, #30
 8001362:	f57f af1e 	bpl.w	80011a2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff f941 	bl	80005ec <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f6      	bls.n	800135e <HAL_RCC_OscConfig+0x1de>
 8001370:	e776      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001372:	f7ff f93b 	bl	80005ec <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2802      	cmp	r0, #2
 800137a:	f67f af29 	bls.w	80011d0 <HAL_RCC_OscConfig+0x50>
 800137e:	e76f      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	2b05      	cmp	r3, #5
 8001382:	d104      	bne.n	800138e <HAL_RCC_OscConfig+0x20e>
 8001384:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	672b      	str	r3, [r5, #112]	; 0x70
 800138c:	e729      	b.n	80011e2 <HAL_RCC_OscConfig+0x62>
 800138e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	672a      	str	r2, [r5, #112]	; 0x70
 8001396:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001398:	f022 0204 	bic.w	r2, r2, #4
 800139c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f47f af23 	bne.w	80011ea <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 80013a4:	f7ff f922 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b0:	0798      	lsls	r0, r3, #30
 80013b2:	f57f af24 	bpl.w	80011fe <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff f919 	bl	80005ec <HAL_GetTick>
 80013ba:	1b80      	subs	r0, r0, r6
 80013bc:	42b8      	cmp	r0, r7
 80013be:	d9f6      	bls.n	80013ae <HAL_RCC_OscConfig+0x22e>
 80013c0:	e74e      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f913 	bl	80005ec <HAL_GetTick>
 80013c6:	1b80      	subs	r0, r0, r6
 80013c8:	42b8      	cmp	r0, r7
 80013ca:	f67f af14 	bls.w	80011f6 <HAL_RCC_OscConfig+0x76>
 80013ce:	e747      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d0:	4d21      	ldr	r5, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
 80013d2:	68ab      	ldr	r3, [r5, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	f43f aed4 	beq.w	8001186 <HAL_RCC_OscConfig+0x6>
 80013de:	4e22      	ldr	r6, [pc, #136]	; (8001468 <HAL_RCC_OscConfig+0x2e8>)
 80013e0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e6:	d12a      	bne.n	800143e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 80013e8:	f7ff f900 	bl	80005ec <HAL_GetTick>
 80013ec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	682b      	ldr	r3, [r5, #0]
 80013f0:	0199      	lsls	r1, r3, #6
 80013f2:	d41e      	bmi.n	8001432 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f4:	6a22      	ldr	r2, [r4, #32]
 80013f6:	69e3      	ldr	r3, [r4, #28]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001400:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001402:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001406:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	4c13      	ldr	r4, [pc, #76]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800140a:	0852      	lsrs	r2, r2, #1
 800140c:	3a01      	subs	r2, #1
 800140e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001412:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001414:	2301      	movs	r3, #1
 8001416:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001418:	f7ff f8e8 	bl	80005ec <HAL_GetTick>
 800141c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	019a      	lsls	r2, r3, #6
 8001422:	f53f aef0 	bmi.w	8001206 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff f8e1 	bl	80005ec <HAL_GetTick>
 800142a:	1b40      	subs	r0, r0, r5
 800142c:	2802      	cmp	r0, #2
 800142e:	d9f6      	bls.n	800141e <HAL_RCC_OscConfig+0x29e>
 8001430:	e716      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f8db 	bl	80005ec <HAL_GetTick>
 8001436:	1bc0      	subs	r0, r0, r7
 8001438:	2802      	cmp	r0, #2
 800143a:	d9d8      	bls.n	80013ee <HAL_RCC_OscConfig+0x26e>
 800143c:	e710      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800143e:	f7ff f8d5 	bl	80005ec <HAL_GetTick>
 8001442:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	019b      	lsls	r3, r3, #6
 8001448:	f57f aedd 	bpl.w	8001206 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f8ce 	bl	80005ec <HAL_GetTick>
 8001450:	1b00      	subs	r0, r0, r4
 8001452:	2802      	cmp	r0, #2
 8001454:	d9f6      	bls.n	8001444 <HAL_RCC_OscConfig+0x2c4>
 8001456:	e703      	b.n	8001260 <HAL_RCC_OscConfig+0xe0>
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000
 8001460:	42470000 	.word	0x42470000
 8001464:	42470e80 	.word	0x42470e80
 8001468:	42470060 	.word	0x42470060

0800146c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800146c:	4910      	ldr	r1, [pc, #64]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x44>)
{
 800146e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001470:	688b      	ldr	r3, [r1, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b08      	cmp	r3, #8
 8001478:	d118      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800147a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	6849      	ldr	r1, [r1, #4]
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001482:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001486:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800148a:	bf18      	it	ne
 800148c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001492:	fba1 0100 	umull	r0, r1, r1, r0
 8001496:	f7fe feeb 	bl	8000270 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x44>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014a2:	3301      	adds	r3, #1
 80014a4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80014a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014aa:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014ae:	bd08      	pop	{r3, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	00f42400 	.word	0x00f42400

080014b8 <HAL_RCC_ClockConfig>:
{
 80014b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014be:	4604      	mov	r4, r0
 80014c0:	b910      	cbnz	r0, 80014c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c8:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_ClockConfig+0x124>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f002 020f 	and.w	r2, r2, #15
 80014d0:	428a      	cmp	r2, r1
 80014d2:	d328      	bcc.n	8001526 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	6821      	ldr	r1, [r4, #0]
 80014d6:	078f      	lsls	r7, r1, #30
 80014d8:	d42d      	bmi.n	8001536 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	07c8      	lsls	r0, r1, #31
 80014dc:	d440      	bmi.n	8001560 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_RCC_ClockConfig+0x124>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f002 020f 	and.w	r2, r2, #15
 80014e6:	4295      	cmp	r5, r2
 80014e8:	d366      	bcc.n	80015b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ea:	6822      	ldr	r2, [r4, #0]
 80014ec:	0751      	lsls	r1, r2, #29
 80014ee:	d46c      	bmi.n	80015ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	0713      	lsls	r3, r2, #28
 80014f2:	d507      	bpl.n	8001504 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f4:	4a3a      	ldr	r2, [pc, #232]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
 80014f6:	6921      	ldr	r1, [r4, #16]
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001502:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001504:	f7ff ffb2 	bl	800146c <HAL_RCC_GetSysClockFreq>
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
 800150a:	4a36      	ldr	r2, [pc, #216]	; (80015e4 <HAL_RCC_ClockConfig+0x12c>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	40d8      	lsrs	r0, r3
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_ClockConfig+0x130>)
 8001518:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff f830 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	4299      	cmp	r1, r3
 8001532:	d1c6      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xa>
 8001534:	e7ce      	b.n	80014d4 <HAL_RCC_ClockConfig+0x1c>
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	bf1e      	ittt	ne
 800153e:	689a      	ldrne	r2, [r3, #8]
 8001540:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001544:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001546:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	bf42      	ittt	mi
 800154a:	689a      	ldrmi	r2, [r3, #8]
 800154c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001550:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68a0      	ldr	r0, [r4, #8]
 8001556:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800155a:	4302      	orrs	r2, r0
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	e7bc      	b.n	80014da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001560:	6862      	ldr	r2, [r4, #4]
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
 8001564:	2a01      	cmp	r2, #1
 8001566:	d11d      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	d0a8      	beq.n	80014c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001570:	4e1b      	ldr	r6, [pc, #108]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
 8001572:	68b3      	ldr	r3, [r6, #8]
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	4313      	orrs	r3, r2
 800157a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800157c:	f7ff f836 	bl	80005ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001584:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	68b3      	ldr	r3, [r6, #8]
 8001588:	6862      	ldr	r2, [r4, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001592:	d0a4      	beq.n	80014de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f82a 	bl	80005ec <HAL_GetTick>
 8001598:	1bc0      	subs	r0, r0, r7
 800159a:	4540      	cmp	r0, r8
 800159c:	d9f3      	bls.n	8001586 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800159e:	2003      	movs	r0, #3
}
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a4:	1e91      	subs	r1, r2, #2
 80015a6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	d802      	bhi.n	80015b2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b0:	e7dd      	b.n	800156e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	f013 0f02 	tst.w	r3, #2
 80015b6:	e7da      	b.n	800156e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b8:	b2ea      	uxtb	r2, r5
 80015ba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	429d      	cmp	r5, r3
 80015c4:	f47f af7d 	bne.w	80014c2 <HAL_RCC_ClockConfig+0xa>
 80015c8:	e78f      	b.n	80014ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <HAL_RCC_ClockConfig+0x128>)
 80015cc:	68e0      	ldr	r0, [r4, #12]
 80015ce:	688b      	ldr	r3, [r1, #8]
 80015d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015d4:	4303      	orrs	r3, r0
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e78a      	b.n	80014f0 <HAL_RCC_ClockConfig+0x38>
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	080046a7 	.word	0x080046a7
 80015e8:	200000e8 	.word	0x200000e8

080015ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200000e8 	.word	0x200000e8

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_RCC_GetPCLK1Freq+0x14>)
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001606:	6810      	ldr	r0, [r2, #0]
}
 8001608:	40d8      	lsrs	r0, r3
 800160a:	4770      	bx	lr
 800160c:	40023800 	.word	0x40023800
 8001610:	080046b7 	.word	0x080046b7
 8001614:	200000e8 	.word	0x200000e8

08001618 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_RCC_GetPCLK2Freq+0x14>)
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_RCC_GetPCLK2Freq+0x18>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001626:	6810      	ldr	r0, [r2, #0]
}
 8001628:	40d8      	lsrs	r0, r3
 800162a:	4770      	bx	lr
 800162c:	40023800 	.word	0x40023800
 8001630:	080046b7 	.word	0x080046b7
 8001634:	200000e8 	.word	0x200000e8

08001638 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001638:	6a03      	ldr	r3, [r0, #32]
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001640:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001642:	6842      	ldr	r2, [r0, #4]
{
 8001644:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001646:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001648:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800164a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800164e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001650:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001652:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001656:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001658:	4c0c      	ldr	r4, [pc, #48]	; (800168c <TIM_OC1_SetConfig+0x54>)
 800165a:	42a0      	cmp	r0, r4
 800165c:	d009      	beq.n	8001672 <TIM_OC1_SetConfig+0x3a>
 800165e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001662:	42a0      	cmp	r0, r4
 8001664:	d005      	beq.n	8001672 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001666:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001668:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800166a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800166c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800166e:	6203      	str	r3, [r0, #32]
} 
 8001670:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001672:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001674:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001676:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800167a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800167c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800167e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001682:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001684:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001688:	4322      	orrs	r2, r4
 800168a:	e7ec      	b.n	8001666 <TIM_OC1_SetConfig+0x2e>
 800168c:	40010000 	.word	0x40010000

08001690 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001690:	6a03      	ldr	r3, [r0, #32]
 8001692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001696:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001698:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800169a:	6842      	ldr	r2, [r0, #4]
{
 800169c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800169e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80016a2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016a6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016a8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80016aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80016b2:	4c0e      	ldr	r4, [pc, #56]	; (80016ec <TIM_OC3_SetConfig+0x5c>)
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d009      	beq.n	80016cc <TIM_OC3_SetConfig+0x3c>
 80016b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016bc:	42a0      	cmp	r0, r4
 80016be:	d005      	beq.n	80016cc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016c0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80016c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80016c4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80016c6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016c8:	6203      	str	r3, [r0, #32]
}
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016cc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016ce:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80016d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80016d8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80016da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016de:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80016e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016e4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80016e8:	e7ea      	b.n	80016c0 <TIM_OC3_SetConfig+0x30>
 80016ea:	bf00      	nop
 80016ec:	40010000 	.word	0x40010000

080016f0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016f6:	6203      	str	r3, [r0, #32]
{
 80016f8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016fa:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016fc:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016fe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001702:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001706:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800170a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800170c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001710:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001714:	4d09      	ldr	r5, [pc, #36]	; (800173c <TIM_OC4_SetConfig+0x4c>)
 8001716:	42a8      	cmp	r0, r5
 8001718:	d009      	beq.n	800172e <TIM_OC4_SetConfig+0x3e>
 800171a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800171e:	42a8      	cmp	r0, r5
 8001720:	d005      	beq.n	800172e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001722:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001724:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001726:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001728:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800172a:	6204      	str	r4, [r0, #32]
}
 800172c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800172e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001734:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001738:	e7f3      	b.n	8001722 <TIM_OC4_SetConfig+0x32>
 800173a:	bf00      	nop
 800173c:	40010000 	.word	0x40010000

08001740 <HAL_TIM_OC_MspInit>:
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001742:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001746:	2b01      	cmp	r3, #1
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800174e:	d01c      	beq.n	800178a <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001754:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001756:	2201      	movs	r2, #1
 8001758:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800175c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800175e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001762:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001766:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001768:	680a      	ldr	r2, [r1, #0]
 800176a:	2a40      	cmp	r2, #64	; 0x40
 800176c:	d079      	beq.n	8001862 <HAL_TIM_ConfigClockSource+0x120>
 800176e:	d819      	bhi.n	80017a4 <HAL_TIM_ConfigClockSource+0x62>
 8001770:	2a10      	cmp	r2, #16
 8001772:	f000 8093 	beq.w	800189c <HAL_TIM_ConfigClockSource+0x15a>
 8001776:	d80a      	bhi.n	800178e <HAL_TIM_ConfigClockSource+0x4c>
 8001778:	2a00      	cmp	r2, #0
 800177a:	f000 8089 	beq.w	8001890 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800177e:	2301      	movs	r3, #1
 8001780:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001784:	2300      	movs	r3, #0
 8001786:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800178a:	4618      	mov	r0, r3
}
 800178c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800178e:	2a20      	cmp	r2, #32
 8001790:	f000 808a 	beq.w	80018a8 <HAL_TIM_ConfigClockSource+0x166>
 8001794:	2a30      	cmp	r2, #48	; 0x30
 8001796:	d1f2      	bne.n	800177e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001798:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800179a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800179e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80017a2:	e036      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80017a4:	2a70      	cmp	r2, #112	; 0x70
 80017a6:	d036      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0xd4>
 80017a8:	d81b      	bhi.n	80017e2 <HAL_TIM_ConfigClockSource+0xa0>
 80017aa:	2a50      	cmp	r2, #80	; 0x50
 80017ac:	d042      	beq.n	8001834 <HAL_TIM_ConfigClockSource+0xf2>
 80017ae:	2a60      	cmp	r2, #96	; 0x60
 80017b0:	d1e5      	bne.n	800177e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80017b4:	684d      	ldr	r5, [r1, #4]
 80017b6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b8:	f024 0410 	bic.w	r4, r4, #16
 80017bc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017be:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80017c0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017c2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80017ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017ce:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80017d2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80017d4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80017d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017dc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80017e0:	e017      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80017e2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017e6:	d011      	beq.n	800180c <HAL_TIM_ConfigClockSource+0xca>
 80017e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80017ec:	d1c7      	bne.n	800177e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80017ee:	688a      	ldr	r2, [r1, #8]
 80017f0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017f2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80017f4:	68c9      	ldr	r1, [r1, #12]
 80017f6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80017fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001800:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001802:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180a:	e002      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e7b3      	b.n	800177e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001816:	688a      	ldr	r2, [r1, #8]
 8001818:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800181a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800181c:	68c9      	ldr	r1, [r1, #12]
 800181e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001820:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001824:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001828:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800182a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800182c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800182e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001832:	e7ee      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001834:	684c      	ldr	r4, [r1, #4]
 8001836:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001838:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800183a:	6a1d      	ldr	r5, [r3, #32]
 800183c:	f025 0501 	bic.w	r5, r5, #1
 8001840:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001842:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001844:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001848:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800184c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001850:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001854:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001856:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001858:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800185c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001860:	e7d7      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001862:	684c      	ldr	r4, [r1, #4]
 8001864:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001866:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001868:	6a1d      	ldr	r5, [r3, #32]
 800186a:	f025 0501 	bic.w	r5, r5, #1
 800186e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001870:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001872:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001876:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800187a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800187e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001882:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001884:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800188a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800188e:	e7c0      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001890:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001892:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001896:	f042 0207 	orr.w	r2, r2, #7
 800189a:	e7ba      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800189c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800189e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018a2:	f042 0217 	orr.w	r2, r2, #23
 80018a6:	e7b4      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80018a8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018ae:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80018b2:	e7ae      	b.n	8001812 <HAL_TIM_ConfigClockSource+0xd0>

080018b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80018b4:	4770      	bx	lr

080018b6 <HAL_TIM_IC_CaptureCallback>:
 80018b6:	4770      	bx	lr

080018b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80018b8:	4770      	bx	lr

080018ba <HAL_TIM_TriggerCallback>:
 80018ba:	4770      	bx	lr

080018bc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018bc:	6803      	ldr	r3, [r0, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	0791      	lsls	r1, r2, #30
{
 80018c2:	b510      	push	{r4, lr}
 80018c4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018c6:	d50e      	bpl.n	80018e6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	0792      	lsls	r2, r2, #30
 80018cc:	d50b      	bpl.n	80018e6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018ce:	f06f 0202 	mvn.w	r2, #2
 80018d2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018d6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018d8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018da:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018dc:	d077      	beq.n	80019ce <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80018de:	f7ff ffea 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	2300      	movs	r3, #0
 80018e4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	0750      	lsls	r0, r2, #29
 80018ec:	d510      	bpl.n	8001910 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	0751      	lsls	r1, r2, #29
 80018f2:	d50d      	bpl.n	8001910 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f4:	f06f 0204 	mvn.w	r2, #4
 80018f8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fc:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001902:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001906:	d068      	beq.n	80019da <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001908:	f7ff ffd5 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190c:	2300      	movs	r3, #0
 800190e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	0712      	lsls	r2, r2, #28
 8001916:	d50f      	bpl.n	8001938 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	0710      	lsls	r0, r2, #28
 800191c:	d50c      	bpl.n	8001938 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800191e:	f06f 0208 	mvn.w	r2, #8
 8001922:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001924:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001926:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001928:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800192a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800192c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800192e:	d05a      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001930:	f7ff ffc1 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001934:	2300      	movs	r3, #0
 8001936:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	06d2      	lsls	r2, r2, #27
 800193e:	d510      	bpl.n	8001962 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	06d0      	lsls	r0, r2, #27
 8001944:	d50d      	bpl.n	8001962 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001946:	f06f 0210 	mvn.w	r2, #16
 800194a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800194c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800194e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001950:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001954:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001958:	d04b      	beq.n	80019f2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	f7ff ffac 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195e:	2300      	movs	r3, #0
 8001960:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	07d1      	lsls	r1, r2, #31
 8001968:	d508      	bpl.n	800197c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	07d2      	lsls	r2, r2, #31
 800196e:	d505      	bpl.n	800197c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001970:	f06f 0201 	mvn.w	r2, #1
 8001974:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001976:	4620      	mov	r0, r4
 8001978:	f001 fbae 	bl	80030d8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	0610      	lsls	r0, r2, #24
 8001982:	d508      	bpl.n	8001996 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	0611      	lsls	r1, r2, #24
 8001988:	d505      	bpl.n	8001996 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800198a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800198e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001990:	4620      	mov	r0, r4
 8001992:	f000 f94e 	bl	8001c32 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	0652      	lsls	r2, r2, #25
 800199c:	d508      	bpl.n	80019b0 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	0650      	lsls	r0, r2, #25
 80019a2:	d505      	bpl.n	80019b0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff85 	bl	80018ba <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	0691      	lsls	r1, r2, #26
 80019b6:	d522      	bpl.n	80019fe <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	0692      	lsls	r2, r2, #26
 80019bc:	d51f      	bpl.n	80019fe <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80019c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019c4:	611a      	str	r2, [r3, #16]
}
 80019c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80019ca:	f000 b931 	b.w	8001c30 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ce:	f7ff ff71 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff ff70 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80019d8:	e783      	b.n	80018e2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019da:	f7ff ff6b 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff ff6a 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80019e4:	e792      	b.n	800190c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e6:	f7ff ff65 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff ff64 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80019f0:	e7a0      	b.n	8001934 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f2:	f7ff ff5f 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff ff5e 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80019fc:	e7af      	b.n	800195e <HAL_TIM_IRQHandler+0xa2>
 80019fe:	bd10      	pop	{r4, pc}

08001a00 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a00:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001a02:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a04:	4290      	cmp	r0, r2
 8001a06:	d012      	beq.n	8001a2e <TIM_Base_SetConfig+0x2e>
 8001a08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a0c:	d00f      	beq.n	8001a2e <TIM_Base_SetConfig+0x2e>
 8001a0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a12:	4290      	cmp	r0, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x2e>
 8001a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x2e>
 8001a26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a2a:	4290      	cmp	r0, r2
 8001a2c:	d11d      	bne.n	8001a6a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001a2e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a34:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a36:	4a21      	ldr	r2, [pc, #132]	; (8001abc <TIM_Base_SetConfig+0xbc>)
 8001a38:	4290      	cmp	r0, r2
 8001a3a:	d104      	bne.n	8001a46 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a42:	4313      	orrs	r3, r2
 8001a44:	e028      	b.n	8001a98 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a46:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a4a:	d0f7      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <TIM_Base_SetConfig+0xc0>)
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d0f4      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d0f0      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d0ec      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d0e8      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a6a:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <TIM_Base_SetConfig+0xc4>)
 8001a6c:	4290      	cmp	r0, r2
 8001a6e:	d0e5      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a74:	4290      	cmp	r0, r2
 8001a76:	d0e1      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7c:	4290      	cmp	r0, r2
 8001a7e:	d0dd      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a80:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a84:	4290      	cmp	r0, r2
 8001a86:	d0d9      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8c:	4290      	cmp	r0, r2
 8001a8e:	d0d5      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
 8001a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a94:	4290      	cmp	r0, r2
 8001a96:	d0d1      	beq.n	8001a3c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001a98:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a9a:	688b      	ldr	r3, [r1, #8]
 8001a9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a9e:	680b      	ldr	r3, [r1, #0]
 8001aa0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <TIM_Base_SetConfig+0xbc>)
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d006      	beq.n	8001ab6 <TIM_Base_SetConfig+0xb6>
 8001aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aac:	4298      	cmp	r0, r3
 8001aae:	d002      	beq.n	8001ab6 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	6143      	str	r3, [r0, #20]
}
 8001ab4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab6:	690b      	ldr	r3, [r1, #16]
 8001ab8:	6303      	str	r3, [r0, #48]	; 0x30
 8001aba:	e7f9      	b.n	8001ab0 <TIM_Base_SetConfig+0xb0>
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40014000 	.word	0x40014000

08001ac8 <HAL_TIM_Base_Init>:
{ 
 8001ac8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001aca:	4604      	mov	r4, r0
 8001acc:	b1a0      	cbz	r0, 8001af8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ace:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ad2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad6:	b91b      	cbnz	r3, 8001ae0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ad8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001adc:	f001 fbc0 	bl	8003260 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	1d21      	adds	r1, r4, #4
 8001aea:	f7ff ff89 	bl	8001a00 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
}
 8001afa:	bd10      	pop	{r4, pc}

08001afc <HAL_TIM_OC_Init>:
{
 8001afc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001afe:	4604      	mov	r4, r0
 8001b00:	b1a0      	cbz	r0, 8001b2c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b0a:	b91b      	cbnz	r3, 8001b14 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b0c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001b10:	f7ff fe16 	bl	8001740 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	1d21      	adds	r1, r4, #4
 8001b1e:	f7ff ff6f 	bl	8001a00 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001b28:	2000      	movs	r0, #0
 8001b2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
}
 8001b2e:	bd10      	pop	{r4, pc}

08001b30 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b30:	6a03      	ldr	r3, [r0, #32]
 8001b32:	f023 0310 	bic.w	r3, r3, #16
 8001b36:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b38:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001b3a:	6842      	ldr	r2, [r0, #4]
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001b3e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b42:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b46:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b4a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b4c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b50:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b54:	4c0d      	ldr	r4, [pc, #52]	; (8001b8c <TIM_OC2_SetConfig+0x5c>)
 8001b56:	42a0      	cmp	r0, r4
 8001b58:	d009      	beq.n	8001b6e <TIM_OC2_SetConfig+0x3e>
 8001b5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b5e:	42a0      	cmp	r0, r4
 8001b60:	d005      	beq.n	8001b6e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001b62:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b64:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b66:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b68:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b6a:	6203      	str	r3, [r0, #32]
}
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b6e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b70:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b76:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b7a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b80:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b86:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001b8a:	e7ea      	b.n	8001b62 <TIM_OC2_SetConfig+0x32>
 8001b8c:	40010000 	.word	0x40010000

08001b90 <HAL_TIM_OC_ConfigChannel>:
{
 8001b90:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 8001b92:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b96:	2b01      	cmp	r3, #1
{
 8001b98:	4604      	mov	r4, r0
 8001b9a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8001b9e:	d018      	beq.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0x42>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8001baa:	461d      	mov	r5, r3
  switch (Channel)
 8001bac:	2a0c      	cmp	r2, #12
 8001bae:	d80b      	bhi.n	8001bc8 <HAL_TIM_OC_ConfigChannel+0x38>
 8001bb0:	e8df f002 	tbb	[pc, r2]
 8001bb4:	0a0a0a07 	.word	0x0a0a0a07
 8001bb8:	0a0a0a10 	.word	0x0a0a0a10
 8001bbc:	0a0a0a14 	.word	0x0a0a0a14
 8001bc0:	18          	.byte	0x18
 8001bc1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	f7ff fd38 	bl	8001638 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8001bc8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001bca:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8001bce:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	f7ff ffab 	bl	8001b30 <TIM_OC2_SetConfig>
    break;
 8001bda:	e7f5      	b.n	8001bc8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	f7ff fd57 	bl	8001690 <TIM_OC3_SetConfig>
    break;
 8001be2:	e7f1      	b.n	8001bc8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001be4:	6820      	ldr	r0, [r4, #0]
 8001be6:	f7ff fd83 	bl	80016f0 <TIM_OC4_SetConfig>
    break;
 8001bea:	e7ed      	b.n	8001bc8 <HAL_TIM_OC_ConfigChannel+0x38>

08001bec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001bec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001bf0:	2b01      	cmp	r3, #1
{
 8001bf2:	b510      	push	{r4, lr}
 8001bf4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001bf8:	d018      	beq.n	8001c2c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001bfe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c00:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c02:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c04:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c0a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4322      	orrs	r2, r4
 8001c10:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001c26:	2300      	movs	r3, #0
 8001c28:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001c2c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001c2e:	bd10      	pop	{r4, pc}

08001c30 <HAL_TIMEx_CommutationCallback>:
 8001c30:	4770      	bx	lr

08001c32 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c32:	4770      	bx	lr

08001c34 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c38:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c3a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001c3c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c3e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c44:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001c46:	6133      	str	r3, [r6, #16]
{
 8001c48:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c4a:	6883      	ldr	r3, [r0, #8]
 8001c4c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001c4e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c50:	4303      	orrs	r3, r0
 8001c52:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c54:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c58:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c5a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001c62:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001c64:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c66:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001c6c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001c72:	6173      	str	r3, [r6, #20]
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c76:	d17c      	bne.n	8001d72 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c78:	429e      	cmp	r6, r3
 8001c7a:	d003      	beq.n	8001c84 <UART_SetConfig+0x50>
 8001c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c80:	429e      	cmp	r6, r3
 8001c82:	d144      	bne.n	8001d0e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c84:	f7ff fcc8 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001c88:	2519      	movs	r5, #25
 8001c8a:	fb05 f300 	mul.w	r3, r5, r0
 8001c8e:	6860      	ldr	r0, [r4, #4]
 8001c90:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c94:	0040      	lsls	r0, r0, #1
 8001c96:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c9a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ca2:	f7ff fcb9 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	4368      	muls	r0, r5
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fbb0 f7f3 	udiv	r7, r0, r3
 8001cb0:	f7ff fcb2 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	6863      	ldr	r3, [r4, #4]
 8001cb6:	4368      	muls	r0, r5
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cc2:	fb09 7313 	mls	r3, r9, r3, r7
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	3332      	adds	r3, #50	; 0x32
 8001cca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001cd4:	f7ff fca0 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	6862      	ldr	r2, [r4, #4]
 8001cda:	4368      	muls	r0, r5
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	fbb0 faf2 	udiv	sl, r0, r2
 8001ce2:	f7ff fc99 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ce6:	6863      	ldr	r3, [r4, #4]
 8001ce8:	4368      	muls	r0, r5
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cf4:	fb09 a313 	mls	r3, r9, r3, sl
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	3332      	adds	r3, #50	; 0x32
 8001cfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d06:	443b      	add	r3, r7
 8001d08:	60b3      	str	r3, [r6, #8]
 8001d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d0e:	f7ff fc73 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001d12:	2519      	movs	r5, #25
 8001d14:	fb05 f300 	mul.w	r3, r5, r0
 8001d18:	6860      	ldr	r0, [r4, #4]
 8001d1a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d1e:	0040      	lsls	r0, r0, #1
 8001d20:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d24:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d2c:	f7ff fc64 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	4368      	muls	r0, r5
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d3a:	f7ff fc5d 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	4368      	muls	r0, r5
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d4c:	fb09 7313 	mls	r3, r9, r3, r7
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	3332      	adds	r3, #50	; 0x32
 8001d54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001d5e:	f7ff fc4b 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001d62:	6862      	ldr	r2, [r4, #4]
 8001d64:	4368      	muls	r0, r5
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	fbb0 faf2 	udiv	sl, r0, r2
 8001d6c:	f7ff fc44 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001d70:	e7b9      	b.n	8001ce6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d72:	429e      	cmp	r6, r3
 8001d74:	d002      	beq.n	8001d7c <UART_SetConfig+0x148>
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <UART_SetConfig+0x230>)
 8001d78:	429e      	cmp	r6, r3
 8001d7a:	d140      	bne.n	8001dfe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d7c:	f7ff fc4c 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001d80:	6867      	ldr	r7, [r4, #4]
 8001d82:	2519      	movs	r5, #25
 8001d84:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d88:	fb05 f300 	mul.w	r3, r5, r0
 8001d8c:	00bf      	lsls	r7, r7, #2
 8001d8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001d92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d96:	011f      	lsls	r7, r3, #4
 8001d98:	f7ff fc3e 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	4368      	muls	r0, r5
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fbb0 f8f3 	udiv	r8, r0, r3
 8001da6:	f7ff fc37 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001daa:	6863      	ldr	r3, [r4, #4]
 8001dac:	4368      	muls	r0, r5
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001db8:	fb09 8313 	mls	r3, r9, r3, r8
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dc4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001dc8:	f7ff fc26 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	6862      	ldr	r2, [r4, #4]
 8001dce:	4368      	muls	r0, r5
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	fbb0 faf2 	udiv	sl, r0, r2
 8001dd6:	f7ff fc1f 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001dda:	6863      	ldr	r3, [r4, #4]
 8001ddc:	4368      	muls	r0, r5
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001de8:	fb09 a313 	mls	r3, r9, r3, sl
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	3332      	adds	r3, #50	; 0x32
 8001df0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	ea43 0308 	orr.w	r3, r3, r8
 8001dfc:	e783      	b.n	8001d06 <UART_SetConfig+0xd2>
 8001dfe:	f7ff fbfb 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e02:	6867      	ldr	r7, [r4, #4]
 8001e04:	2519      	movs	r5, #25
 8001e06:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e0a:	fb05 f300 	mul.w	r3, r5, r0
 8001e0e:	00bf      	lsls	r7, r7, #2
 8001e10:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e14:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e18:	011f      	lsls	r7, r3, #4
 8001e1a:	f7ff fbed 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	4368      	muls	r0, r5
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fbb0 f8f3 	udiv	r8, r0, r3
 8001e28:	f7ff fbe6 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	4368      	muls	r0, r5
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e3a:	fb09 8313 	mls	r3, r9, r3, r8
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	3332      	adds	r3, #50	; 0x32
 8001e42:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e46:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001e4a:	f7ff fbd5 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	4368      	muls	r0, r5
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	fbb0 faf2 	udiv	sl, r0, r2
 8001e58:	f7ff fbce 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e5c:	e7bd      	b.n	8001dda <UART_SetConfig+0x1a6>
 8001e5e:	bf00      	nop
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40011400 	.word	0x40011400

08001e68 <HAL_UART_Init>:
{
 8001e68:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	b340      	cbz	r0, 8001ec0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e76:	b91b      	cbnz	r3, 8001e80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e7c:	f001 fa26 	bl	80032cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e82:	2324      	movs	r3, #36	; 0x24
 8001e84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e88:	68d3      	ldr	r3, [r2, #12]
 8001e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff fecf 	bl	8001c34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001eb2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001eb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001eba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ebe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	bd10      	pop	{r4, pc}

08001ec4 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	b538      	push	{r3, r4, r5, lr}
 8001ec8:	ad05      	add	r5, sp, #20
 8001eca:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ed0:	2b01      	cmp	r3, #1
{
 8001ed2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ed4:	d126      	bne.n	8001f24 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001ed6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001ede:	68c3      	ldr	r3, [r0, #12]
 8001ee0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee8:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001eea:	68c3      	ldr	r3, [r0, #12]
 8001eec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ef0:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8001ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001ef4:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001ef6:	bf02      	ittt	eq
 8001ef8:	68c3      	ldreq	r3, [r0, #12]
 8001efa:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001efe:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001f00:	f000 fbde 	bl	80026c0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8001f04:	9b08      	ldr	r3, [sp, #32]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	f043 0306 	orr.w	r3, r3, #6
 8001f10:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f12:	68a3      	ldr	r3, [r4, #8]
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8001f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f1e:	2000      	movs	r0, #0
 8001f20:	b004      	add	sp, #16
 8001f22:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001f24:	68c3      	ldr	r3, [r0, #12]
 8001f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001f2c:	f000 fbc8 	bl	80026c0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f34:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f36:	e7e5      	b.n	8001f04 <USB_CoreInit+0x40>

08001f38 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001f38:	6883      	ldr	r3, [r0, #8]
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	4770      	bx	lr

08001f44 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001f44:	6883      	ldr	r3, [r0, #8]
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	4770      	bx	lr

08001f50 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001f50:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001f52:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001f54:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001f56:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001f5a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001f5c:	d108      	bne.n	8001f70 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001f5e:	68c3      	ldr	r3, [r0, #12]
 8001f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f64:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001f66:	2032      	movs	r0, #50	; 0x32
 8001f68:	f7fe fb46 	bl	80005f8 <HAL_Delay>
  
  return HAL_OK;
}
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001f70:	2900      	cmp	r1, #0
 8001f72:	d1f8      	bne.n	8001f66 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001f74:	68c3      	ldr	r3, [r0, #12]
 8001f76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f7a:	60c3      	str	r3, [r0, #12]
 8001f7c:	e7f3      	b.n	8001f66 <USB_SetCurrentMode+0x16>
	...

08001f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001f80:	b084      	sub	sp, #16
 8001f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	a807      	add	r0, sp, #28
 8001f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f8e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001f90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f94:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8001f96:	b9a6      	cbnz	r6, 8001fc2 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001fa4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001fa8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001fae:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001fb0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001fb4:	d15e      	bne.n	8002074 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8001fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001fb8:	b939      	cbnz	r1, 8001fca <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 f89e 	bl	80020fc <USB_SetDevSpeed>
 8001fc0:	e007      	b.n	8001fd2 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001fc8:	e7e9      	b.n	8001f9e <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f000 f895 	bl	80020fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f000 f86f 	bl	80020b8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f000 f87e 	bl	80020dc <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001fe0:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 8001fe6:	612b      	str	r3, [r5, #16]
 8001fe8:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8001fea:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001ff0:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001ff2:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 8001ff6:	61eb      	str	r3, [r5, #28]
 8001ff8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ffc:	4543      	cmp	r3, r8
 8001ffe:	d13b      	bne.n	8002078 <USB_DevInit+0xf8>
 8002000:	2100      	movs	r1, #0
 8002002:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8002006:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002008:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800200c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002010:	428b      	cmp	r3, r1
 8002012:	d13e      	bne.n	8002092 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002014:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002016:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201c:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800201e:	d108      	bne.n	8002032 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <USB_DevInit+0x130>)
 8002022:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002024:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	f043 0303 	orr.w	r3, r3, #3
 800202e:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002030:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002036:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800203a:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800203c:	b91f      	cbnz	r7, 8002046 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800203e:	69a3      	ldr	r3, [r4, #24]
 8002040:	f043 0310 	orr.w	r3, r3, #16
 8002044:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002046:	69a2      	ldr	r2, [r4, #24]
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <USB_DevInit+0x134>)
 800204a:	4313      	orrs	r3, r2
 800204c:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800204e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002050:	b11b      	cbz	r3, 800205a <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002052:	69a3      	ldr	r3, [r4, #24]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800205a:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800205c:	bf01      	itttt	eq
 800205e:	69a3      	ldreq	r3, [r4, #24]
 8002060:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002064:	f043 0304 	orreq.w	r3, r3, #4
 8002068:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 800206a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800206e:	2000      	movs	r0, #0
 8002070:	b004      	add	sp, #16
 8002072:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002074:	2103      	movs	r1, #3
 8002076:	e7a0      	b.n	8001fba <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002078:	f8d2 c000 	ldr.w	ip, [r2]
 800207c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002080:	bfb4      	ite	lt
 8002082:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002084:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002086:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002088:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800208a:	f8c2 e008 	str.w	lr, [r2, #8]
 800208e:	3220      	adds	r2, #32
 8002090:	e7b4      	b.n	8001ffc <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002092:	f8d2 8000 	ldr.w	r8, [r2]
 8002096:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800209a:	bfb4      	ite	lt
 800209c:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80020a0:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020a2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80020a4:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80020a6:	f8c2 c008 	str.w	ip, [r2, #8]
 80020aa:	3220      	adds	r2, #32
 80020ac:	e7b0      	b.n	8002010 <USB_DevInit+0x90>
 80020ae:	bf00      	nop
 80020b0:	00800100 	.word	0x00800100
 80020b4:	803c3800 	.word	0x803c3800

080020b8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80020b8:	0189      	lsls	r1, r1, #6
 80020ba:	f041 0120 	orr.w	r1, r1, #32
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <USB_FlushTxFifo+0x20>)
 80020c0:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80020c2:	3a01      	subs	r2, #1
 80020c4:	d005      	beq.n	80020d2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80020c6:	6903      	ldr	r3, [r0, #16]
 80020c8:	f013 0320 	ands.w	r3, r3, #32
 80020cc:	d1f9      	bne.n	80020c2 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80020ce:	4618      	mov	r0, r3
 80020d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80020d2:	2003      	movs	r0, #3
}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	00030d41 	.word	0x00030d41

080020dc <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80020dc:	2310      	movs	r3, #16
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <USB_FlushRxFifo+0x1c>)
 80020e0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80020e2:	3a01      	subs	r2, #1
 80020e4:	d005      	beq.n	80020f2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80020e6:	6903      	ldr	r3, [r0, #16]
 80020e8:	f013 0310 	ands.w	r3, r3, #16
 80020ec:	d1f9      	bne.n	80020e2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80020ee:	4618      	mov	r0, r3
 80020f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80020f2:	2003      	movs	r0, #3
}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	00030d41 	.word	0x00030d41

080020fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80020fc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002100:	4319      	orrs	r1, r3
 8002102:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002106:	2000      	movs	r0, #0
 8002108:	4770      	bx	lr

0800210a <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800210a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800210e:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8002112:	f010 0006 	ands.w	r0, r0, #6
 8002116:	d012      	beq.n	800213e <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002118:	6893      	ldr	r3, [r2, #8]
 800211a:	f003 0306 	and.w	r3, r3, #6
 800211e:	2b02      	cmp	r3, #2
 8002120:	d00c      	beq.n	800213c <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002122:	6893      	ldr	r3, [r2, #8]
 8002124:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002128:	2b06      	cmp	r3, #6
 800212a:	d007      	beq.n	800213c <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800212c:	6893      	ldr	r3, [r2, #8]
 800212e:	f003 0306 	and.w	r3, r3, #6
 8002132:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8002134:	bf14      	ite	ne
 8002136:	2000      	movne	r0, #0
 8002138:	2002      	moveq	r0, #2
 800213a:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 800213c:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800213e:	4770      	bx	lr

08002140 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002140:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8002142:	784b      	ldrb	r3, [r1, #1]
 8002144:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002146:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800214a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800214e:	2b01      	cmp	r3, #1
 8002150:	d11b      	bne.n	800218a <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002152:	40a3      	lsls	r3, r4
 8002154:	b29b      	uxth	r3, r3
 8002156:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002158:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800215c:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800215e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	0412      	lsls	r2, r2, #16
 8002166:	d40e      	bmi.n	8002186 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002168:	688a      	ldr	r2, [r1, #8]
 800216a:	78c8      	ldrb	r0, [r1, #3]
 800216c:	681d      	ldr	r5, [r3, #0]
 800216e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002172:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217a:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800217e:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002182:	4328      	orrs	r0, r5
 8002184:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8002186:	2000      	movs	r0, #0
 8002188:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800218a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218e:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002190:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002194:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002196:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800219a:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	d4f1      	bmi.n	8002186 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80021a2:	688b      	ldr	r3, [r1, #8]
 80021a4:	78c9      	ldrb	r1, [r1, #3]
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80021b8:	4313      	orrs	r3, r2
 80021ba:	6003      	str	r3, [r0, #0]
 80021bc:	e7e3      	b.n	8002186 <USB_ActivateEndpoint+0x46>

080021be <USB_DeactivateEndpoint>:
 80021be:	f000 b801 	b.w	80021c4 <USB_DeactivateDedicatedEndpoint>
	...

080021c4 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80021c6:	784b      	ldrb	r3, [r1, #1]
 80021c8:	2b01      	cmp	r3, #1
{
 80021ca:	460e      	mov	r6, r1
 80021cc:	4605      	mov	r5, r0
 80021ce:	7809      	ldrb	r1, [r1, #0]
 80021d0:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 80021d4:	d126      	bne.n	8002224 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80021d6:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80021da:	fb13 2301 	smlabb	r3, r3, r1, r2
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e4:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80021e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ea:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80021ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 80021f4:	3a01      	subs	r2, #1
 80021f6:	d101      	bne.n	80021fc <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80021fc:	689c      	ldr	r4, [r3, #8]
 80021fe:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8002202:	d1f7      	bne.n	80021f4 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002204:	2110      	movs	r1, #16
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff ff56 	bl	80020b8 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 800220c:	7831      	ldrb	r1, [r6, #0]
 800220e:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8002212:	2301      	movs	r3, #1
 8002214:	408b      	lsls	r3, r1
 8002216:	b29b      	uxth	r3, r3
 8002218:	ea22 0303 	bic.w	r3, r2, r3
 800221c:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8002220:	4620      	mov	r0, r4
 8002222:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002224:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8002228:	fb13 2301 	smlabb	r3, r3, r1, r2
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002232:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002238:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800223a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8002242:	3a01      	subs	r2, #1
 8002244:	d0d8      	beq.n	80021f8 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8002246:	6898      	ldr	r0, [r3, #8]
 8002248:	f010 0010 	ands.w	r0, r0, #16
 800224c:	d1f9      	bne.n	8002242 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800224e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800225a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800225e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002262:	408a      	lsls	r2, r1
 8002264:	ea23 0302 	bic.w	r3, r3, r2
 8002268:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 800226c:	bd70      	pop	{r4, r5, r6, pc}
 800226e:	bf00      	nop
 8002270:	00030d41 	.word	0x00030d41

08002274 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8002276:	784b      	ldrb	r3, [r1, #1]
 8002278:	780c      	ldrb	r4, [r1, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	694b      	ldr	r3, [r1, #20]
 800227e:	d177      	bne.n	8002370 <USB_EPStartXfer+0xfc>
 8002280:	2620      	movs	r6, #32
 8002282:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002286:	fb16 5404 	smlabb	r4, r6, r4, r5
 800228a:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 800228c:	2b00      	cmp	r3, #0
 800228e:	d138      	bne.n	8002302 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002290:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002294:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002298:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800229a:	6926      	ldr	r6, [r4, #16]
 800229c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80022a0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80022a2:	6926      	ldr	r6, [r4, #16]
 80022a4:	0cf6      	lsrs	r6, r6, #19
 80022a6:	04f6      	lsls	r6, r6, #19
 80022a8:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80022aa:	2a01      	cmp	r2, #1
 80022ac:	d150      	bne.n	8002350 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80022ae:	780c      	ldrb	r4, [r1, #0]
 80022b0:	690e      	ldr	r6, [r1, #16]
 80022b2:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80022b6:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80022b8:	78ce      	ldrb	r6, [r1, #3]
 80022ba:	2e01      	cmp	r6, #1
 80022bc:	d10f      	bne.n	80022de <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80022be:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80022c2:	780f      	ldrb	r7, [r1, #0]
 80022c4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80022c8:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80022cc:	fb14 5407 	smlabb	r4, r4, r7, r5
 80022d0:	6827      	ldr	r7, [r4, #0]
 80022d2:	bf0c      	ite	eq
 80022d4:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80022d8:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80022dc:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022de:	780f      	ldrb	r7, [r1, #0]
 80022e0:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80022e4:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022e6:	682c      	ldr	r4, [r5, #0]
 80022e8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80022ec:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80022ee:	d105      	bne.n	80022fc <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80022f0:	9200      	str	r2, [sp, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	463a      	mov	r2, r7
 80022f6:	68c9      	ldr	r1, [r1, #12]
 80022f8:	f000 f8ef 	bl	80024da <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	b003      	add	sp, #12
 8002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002302:	0cf6      	lsrs	r6, r6, #19
 8002304:	04f6      	lsls	r6, r6, #19
 8002306:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002308:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800230a:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800230c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002310:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002314:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002316:	19de      	adds	r6, r3, r7
 8002318:	3e01      	subs	r6, #1
 800231a:	fbb6 f7f7 	udiv	r7, r6, r7
 800231e:	4e37      	ldr	r6, [pc, #220]	; (80023fc <USB_EPStartXfer+0x188>)
 8002320:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002324:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8002328:	ea46 060e 	orr.w	r6, r6, lr
 800232c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800232e:	6927      	ldr	r7, [r4, #16]
 8002330:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002334:	433e      	orrs	r6, r7
 8002336:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002338:	78ce      	ldrb	r6, [r1, #3]
 800233a:	2e01      	cmp	r6, #1
 800233c:	d15a      	bne.n	80023f4 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800233e:	6926      	ldr	r6, [r4, #16]
 8002340:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8002344:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8002346:	6926      	ldr	r6, [r4, #16]
 8002348:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800234c:	6126      	str	r6, [r4, #16]
 800234e:	e7ac      	b.n	80022aa <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8002350:	78ce      	ldrb	r6, [r1, #3]
 8002352:	2e01      	cmp	r6, #1
 8002354:	d0b3      	beq.n	80022be <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ae      	beq.n	80022b8 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 800235a:	f891 e000 	ldrb.w	lr, [r1]
 800235e:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8002362:	2401      	movs	r4, #1
 8002364:	fa04 f40e 	lsl.w	r4, r4, lr
 8002368:	433c      	orrs	r4, r7
 800236a:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800236e:	e7a3      	b.n	80022b8 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002370:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8002374:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8002378:	6925      	ldr	r5, [r4, #16]
 800237a:	0ced      	lsrs	r5, r5, #19
 800237c:	04ed      	lsls	r5, r5, #19
 800237e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002380:	6925      	ldr	r5, [r4, #16]
 8002382:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002386:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800238a:	6125      	str	r5, [r4, #16]
 800238c:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800238e:	b9fb      	cbnz	r3, 80023d0 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002390:	6923      	ldr	r3, [r4, #16]
 8002392:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002396:	431d      	orrs	r5, r3
 8002398:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 800239a:	6923      	ldr	r3, [r4, #16]
 800239c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023a0:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80023a2:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80023a4:	bf04      	itt	eq
 80023a6:	68cb      	ldreq	r3, [r1, #12]
 80023a8:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80023aa:	78cb      	ldrb	r3, [r1, #3]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10a      	bne.n	80023c6 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80023b0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80023b4:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	bf0c      	ite	eq
 80023bc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80023c0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023cc:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 80023ce:	e795      	b.n	80022fc <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80023d0:	4e0a      	ldr	r6, [pc, #40]	; (80023fc <USB_EPStartXfer+0x188>)
 80023d2:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 80023d4:	442b      	add	r3, r5
 80023d6:	3b01      	subs	r3, #1
 80023d8:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80023dc:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80023e0:	433e      	orrs	r6, r7
 80023e2:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	6926      	ldr	r6, [r4, #16]
 80023e8:	435d      	muls	r5, r3
 80023ea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80023ee:	4335      	orrs	r5, r6
 80023f0:	6125      	str	r5, [r4, #16]
 80023f2:	e7d6      	b.n	80023a2 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 80023f4:	2a01      	cmp	r2, #1
 80023f6:	d1ae      	bne.n	8002356 <USB_EPStartXfer+0xe2>
 80023f8:	e759      	b.n	80022ae <USB_EPStartXfer+0x3a>
 80023fa:	bf00      	nop
 80023fc:	1ff80000 	.word	0x1ff80000

08002400 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8002400:	784b      	ldrb	r3, [r1, #1]
 8002402:	2b01      	cmp	r3, #1
{
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	780b      	ldrb	r3, [r1, #0]
 8002408:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 800240a:	d143      	bne.n	8002494 <USB_EP0StartXfer+0x94>
 800240c:	2420      	movs	r4, #32
 800240e:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002412:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002416:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8002418:	b9cd      	cbnz	r5, 800244e <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800241a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800241e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002422:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002424:	691c      	ldr	r4, [r3, #16]
 8002426:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800242a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800242c:	691c      	ldr	r4, [r3, #16]
 800242e:	0ce4      	lsrs	r4, r4, #19
 8002430:	04e4      	lsls	r4, r4, #19
 8002432:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002434:	780d      	ldrb	r5, [r1, #0]
 8002436:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 800243a:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002442:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8002444:	d11b      	bne.n	800247e <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002446:	690a      	ldr	r2, [r1, #16]
 8002448:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 800244a:	2000      	movs	r0, #0
 800244c:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800244e:	0ce4      	lsrs	r4, r4, #19
 8002450:	04e4      	lsls	r4, r4, #19
 8002452:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002454:	691c      	ldr	r4, [r3, #16]
 8002456:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800245a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800245e:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8002460:	688c      	ldr	r4, [r1, #8]
 8002462:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8002464:	bf88      	it	hi
 8002466:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002468:	691c      	ldr	r4, [r3, #16]
 800246a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800246e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002470:	694c      	ldr	r4, [r1, #20]
 8002472:	691d      	ldr	r5, [r3, #16]
 8002474:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002478:	432c      	orrs	r4, r5
 800247a:	611c      	str	r4, [r3, #16]
 800247c:	e7da      	b.n	8002434 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 800247e:	694b      	ldr	r3, [r1, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0e2      	beq.n	800244a <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8002484:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002488:	2301      	movs	r3, #1
 800248a:	40ab      	lsls	r3, r5
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002492:	e7da      	b.n	800244a <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002494:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002498:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800249c:	6903      	ldr	r3, [r0, #16]
 800249e:	0cdb      	lsrs	r3, r3, #19
 80024a0:	04db      	lsls	r3, r3, #19
 80024a2:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80024a4:	6903      	ldr	r3, [r0, #16]
 80024a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80024aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80024ae:	6103      	str	r3, [r0, #16]
 80024b0:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80024b2:	b105      	cbz	r5, 80024b6 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 80024b4:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80024b6:	6904      	ldr	r4, [r0, #16]
 80024b8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80024bc:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80024be:	6904      	ldr	r4, [r0, #16]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	4323      	orrs	r3, r4
    if (dma == 1U)
 80024c6:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80024c8:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80024ca:	bf04      	itt	eq
 80024cc:	68cb      	ldreq	r3, [r1, #12]
 80024ce:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80024d0:	6803      	ldr	r3, [r0, #0]
 80024d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80024d6:	6003      	str	r3, [r0, #0]
 80024d8:	e7b7      	b.n	800244a <USB_EP0StartXfer+0x4a>

080024da <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80024da:	b510      	push	{r4, lr}
 80024dc:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80024e0:	b94c      	cbnz	r4, 80024f6 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80024e2:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80024e4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80024f0:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80024f2:	4299      	cmp	r1, r3
 80024f4:	d101      	bne.n	80024fa <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 80024f6:	2000      	movs	r0, #0
 80024f8:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80024fa:	f851 0b04 	ldr.w	r0, [r1], #4
 80024fe:	6010      	str	r0, [r2, #0]
 8002500:	e7f7      	b.n	80024f2 <USB_WritePacket+0x18>

08002502 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8002502:	3203      	adds	r2, #3
 8002504:	f022 0203 	bic.w	r2, r2, #3
 8002508:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800250a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800250e:	4291      	cmp	r1, r2
 8002510:	d101      	bne.n	8002516 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8002512:	4608      	mov	r0, r1
 8002514:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	f841 3b04 	str.w	r3, [r1], #4
 800251c:	e7f7      	b.n	800250e <USB_ReadPacket+0xc>

0800251e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800251e:	784b      	ldrb	r3, [r1, #1]
 8002520:	780a      	ldrb	r2, [r1, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f04f 0320 	mov.w	r3, #32
 8002528:	d10b      	bne.n	8002542 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800252a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800252e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002532:	6803      	ldr	r3, [r0, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0b      	blt.n	8002550 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800253e:	6003      	str	r3, [r0, #0]
 8002540:	e006      	b.n	8002550 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8002542:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002546:	fb13 0002 	smlabb	r0, r3, r2, r0
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	daf3      	bge.n	8002538 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002550:	6803      	ldr	r3, [r0, #0]
 8002552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002556:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8002558:	2000      	movs	r0, #0
 800255a:	4770      	bx	lr

0800255c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800255c:	784b      	ldrb	r3, [r1, #1]
 800255e:	780a      	ldrb	r2, [r1, #0]
 8002560:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002562:	bf0c      	ite	eq
 8002564:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002568:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 800256c:	2320      	movs	r3, #32
 800256e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002578:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800257a:	78cb      	ldrb	r3, [r1, #3]
 800257c:	3b02      	subs	r3, #2
 800257e:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002580:	bf9e      	ittt	ls
 8002582:	6803      	ldrls	r3, [r0, #0]
 8002584:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002588:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 800258a:	2000      	movs	r0, #0
 800258c:	4770      	bx	lr

0800258e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800258e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002592:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002596:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 800259a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800259e:	0109      	lsls	r1, r1, #4
 80025a0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80025a4:	4319      	orrs	r1, r3
 80025a6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80025aa:	2000      	movs	r0, #0
 80025ac:	4770      	bx	lr

080025ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80025ae:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80025b0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025b4:	f023 0302 	bic.w	r3, r3, #2
 80025b8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025bc:	2003      	movs	r0, #3
 80025be:	f7fe f81b 	bl	80005f8 <HAL_Delay>
  
  return HAL_OK;  
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd08      	pop	{r3, pc}

080025c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80025c6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80025c8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f7fe f80f 	bl	80005f8 <HAL_Delay>
  
  return HAL_OK;  
}
 80025da:	2000      	movs	r0, #0
 80025dc:	bd08      	pop	{r3, pc}

080025de <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80025de:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80025e0:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80025e2:	4010      	ands	r0, r2
 80025e4:	4770      	bx	lr

080025e6 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80025e6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80025ea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80025ee:	69c0      	ldr	r0, [r0, #28]
 80025f0:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 80025f2:	0c00      	lsrs	r0, r0, #16
 80025f4:	4770      	bx	lr

080025f6 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80025f6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80025fa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80025fe:	69c0      	ldr	r0, [r0, #28]
 8002600:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8002602:	b280      	uxth	r0, r0
 8002604:	4770      	bx	lr

08002606 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002606:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800260a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 800260e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002612:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002614:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8002616:	4010      	ands	r0, r2
 8002618:	4770      	bx	lr

0800261a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800261a:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 800261c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002620:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002624:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002628:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800262a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800262e:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002630:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4323      	orrs	r3, r4
  return v;
}
 8002636:	4018      	ands	r0, r3
 8002638:	bd10      	pop	{r4, pc}

0800263a <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 800263a:	6940      	ldr	r0, [r0, #20]
}
 800263c:	f000 0001 	and.w	r0, r0, #1
 8002640:	4770      	bx	lr

08002642 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002642:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002646:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002652:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	f002 0206 	and.w	r2, r2, #6
 800265c:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800265e:	bf02      	ittt	eq
 8002660:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002664:	f042 0203 	orreq.w	r2, r2, #3
 8002668:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002672:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002674:	2000      	movs	r0, #0
 8002676:	4770      	bx	lr

08002678 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002678:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800267a:	2400      	movs	r4, #0
 800267c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002680:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002684:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002688:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800268c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002690:	f044 0418 	orr.w	r4, r4, #24
 8002694:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002698:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 800269c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800269e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80026a2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80026a6:	bf08      	it	eq
 80026a8:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80026ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80026b0:	bf04      	itt	eq
 80026b2:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80026b6:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80026ba:	2000      	movs	r0, #0
 80026bc:	bd10      	pop	{r4, pc}
	...

080026c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80026c2:	3b01      	subs	r3, #1
 80026c4:	d101      	bne.n	80026ca <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80026c6:	2003      	movs	r0, #3
 80026c8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80026ca:	6902      	ldr	r2, [r0, #16]
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	daf8      	bge.n	80026c2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80026d0:	6903      	ldr	r3, [r0, #16]
 80026d2:	4a06      	ldr	r2, [pc, #24]	; (80026ec <USB_CoreReset+0x2c>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80026da:	3a01      	subs	r2, #1
 80026dc:	d0f3      	beq.n	80026c6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80026de:	6903      	ldr	r3, [r0, #16]
 80026e0:	f013 0301 	ands.w	r3, r3, #1
 80026e4:	d1f9      	bne.n	80026da <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80026e6:	4618      	mov	r0, r3
}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	00030d41 	.word	0x00030d41

080026f0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80026f0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80026f2:	b950      	cbnz	r0, 800270a <USBD_Init+0x1a>
  {
    USBD_ErrLog("Invalid Device handle");
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <USBD_Init+0x3c>)
 80026f6:	f001 f8d5 	bl	80038a4 <iprintf>
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <USBD_Init+0x40>)
 80026fc:	f001 f8d2 	bl	80038a4 <iprintf>
 8002700:	200a      	movs	r0, #10
 8002702:	f001 f8e7 	bl	80038d4 <putchar>
    return USBD_FAIL; 
 8002706:	2002      	movs	r0, #2
 8002708:	bd08      	pop	{r3, pc}
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800270a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800270e:	b113      	cbz	r3, 8002716 <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002716:	b109      	cbz	r1, 800271c <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 8002718:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800271c:	2301      	movs	r3, #1
 800271e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002722:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002724:	f000 fea6 	bl	8003474 <USBD_LL_Init>
  
  return USBD_OK; 
 8002728:	2000      	movs	r0, #0
}
 800272a:	bd08      	pop	{r3, pc}
 800272c:	08004674 	.word	0x08004674
 8002730:	0800467c 	.word	0x0800467c

08002734 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002734:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002736:	b119      	cbz	r1, 8002740 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002738:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800273c:	2000      	movs	r0, #0
 800273e:	bd08      	pop	{r3, pc}
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <USBD_RegisterClass+0x24>)
 8002742:	f001 f8af 	bl	80038a4 <iprintf>
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <USBD_RegisterClass+0x28>)
 8002748:	f001 f8ac 	bl	80038a4 <iprintf>
 800274c:	200a      	movs	r0, #10
 800274e:	f001 f8c1 	bl	80038d4 <putchar>
    status = USBD_FAIL; 
 8002752:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002754:	bd08      	pop	{r3, pc}
 8002756:	bf00      	nop
 8002758:	08004674 	.word	0x08004674
 800275c:	08004692 	.word	0x08004692

08002760 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002760:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002762:	f000 febd 	bl	80034e0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002766:	2000      	movs	r0, #0
 8002768:	bd08      	pop	{r3, pc}

0800276a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800276a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800276c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002770:	b90b      	cbnz	r3, 8002776 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002772:	2002      	movs	r0, #2
 8002774:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4798      	blx	r3
 800277a:	2800      	cmp	r0, #0
 800277c:	d1f9      	bne.n	8002772 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800277e:	bd08      	pop	{r3, pc}

08002780 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002780:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002782:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4798      	blx	r3
  return USBD_OK;
}
 800278a:	2000      	movs	r0, #0
 800278c:	bd08      	pop	{r3, pc}

0800278e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800278e:	b538      	push	{r3, r4, r5, lr}
 8002790:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002792:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002796:	4628      	mov	r0, r5
 8002798:	f000 fa75 	bl	8002c86 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800279c:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800279e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80027a2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80027a6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80027aa:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80027ae:	f001 031f 	and.w	r3, r1, #31
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00e      	beq.n	80027d4 <USBD_LL_SetupStage+0x46>
 80027b6:	d307      	bcc.n	80027c8 <USBD_LL_SetupStage+0x3a>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d010      	beq.n	80027de <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80027bc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 feb9 	bl	8003538 <USBD_LL_StallEP>
    break;
 80027c6:	e003      	b.n	80027d0 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80027c8:	4629      	mov	r1, r5
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 f8e6 	bl	800299c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80027d0:	2000      	movs	r0, #0
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80027d4:	4629      	mov	r1, r5
 80027d6:	4620      	mov	r0, r4
 80027d8:	f000 f9da 	bl	8002b90 <USBD_StdItfReq>
    break;
 80027dc:	e7f8      	b.n	80027d0 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80027de:	4629      	mov	r1, r5
 80027e0:	4620      	mov	r0, r4
 80027e2:	f000 f9ed 	bl	8002bc0 <USBD_StdEPReq>
    break;
 80027e6:	e7f3      	b.n	80027d0 <USBD_LL_SetupStage+0x42>

080027e8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80027ee:	bb11      	cbnz	r1, 8002836 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80027f0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10f      	bne.n	8002818 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80027f8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80027fc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002800:	4293      	cmp	r3, r2
 8002802:	d90b      	bls.n	800281c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002804:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002806:	429a      	cmp	r2, r3
 8002808:	bf28      	it	cs
 800280a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800280c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002810:	b292      	uxth	r2, r2
 8002812:	4629      	mov	r1, r5
 8002814:	f000 fb3b 	bl	8002e8e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002818:	2000      	movs	r0, #0
 800281a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800281c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	b123      	cbz	r3, 800282e <USBD_LL_DataOutStage+0x46>
 8002824:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002828:	2a03      	cmp	r2, #3
 800282a:	d100      	bne.n	800282e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800282c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800282e:	4620      	mov	r0, r4
 8002830:	f000 fb35 	bl	8002e9e <USBD_CtlSendStatus>
 8002834:	e7f0      	b.n	8002818 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002836:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0eb      	beq.n	8002818 <USBD_LL_DataOutStage+0x30>
 8002840:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002844:	2a03      	cmp	r2, #3
 8002846:	d1e7      	bne.n	8002818 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002848:	4798      	blx	r3
 800284a:	e7e5      	b.n	8002818 <USBD_LL_DataOutStage+0x30>

0800284c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	4613      	mov	r3, r2
 8002850:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002852:	460e      	mov	r6, r1
 8002854:	2900      	cmp	r1, #0
 8002856:	d13d      	bne.n	80028d4 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002858:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800285c:	2a02      	cmp	r2, #2
 800285e:	d10f      	bne.n	8002880 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002860:	69c5      	ldr	r5, [r0, #28]
 8002862:	6a02      	ldr	r2, [r0, #32]
 8002864:	4295      	cmp	r5, r2
 8002866:	d914      	bls.n	8002892 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002868:	1aaa      	subs	r2, r5, r2
 800286a:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800286c:	4619      	mov	r1, r3
 800286e:	b292      	uxth	r2, r2
 8002870:	f000 fb05 	bl	8002e7e <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002874:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002876:	461a      	mov	r2, r3
 8002878:	4619      	mov	r1, r3
 800287a:	4620      	mov	r0, r4
 800287c:	f000 fea8 	bl	80035d0 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002880:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800288e:	2000      	movs	r0, #0
 8002890:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002892:	6983      	ldr	r3, [r0, #24]
 8002894:	fbb3 f5f2 	udiv	r5, r3, r2
 8002898:	fb02 3515 	mls	r5, r2, r5, r3
 800289c:	b965      	cbnz	r5, 80028b8 <USBD_LL_DataInStage+0x6c>
 800289e:	429a      	cmp	r2, r3
 80028a0:	d80a      	bhi.n	80028b8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80028a2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d206      	bcs.n	80028b8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80028aa:	462a      	mov	r2, r5
 80028ac:	f000 fae7 	bl	8002e7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80028b0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80028b4:	462b      	mov	r3, r5
 80028b6:	e7de      	b.n	8002876 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80028b8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	b12b      	cbz	r3, 80028cc <USBD_LL_DataInStage+0x80>
 80028c0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80028c4:	2a03      	cmp	r2, #3
 80028c6:	d101      	bne.n	80028cc <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80028c8:	4620      	mov	r0, r4
 80028ca:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 faf1 	bl	8002eb4 <USBD_CtlReceiveStatus>
 80028d2:	e7d5      	b.n	8002880 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80028d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0d7      	beq.n	800288e <USBD_LL_DataInStage+0x42>
 80028de:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028e2:	2a03      	cmp	r2, #3
 80028e4:	d1d3      	bne.n	800288e <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80028e6:	4798      	blx	r3
 80028e8:	e7d1      	b.n	800288e <USBD_LL_DataInStage+0x42>

080028ea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80028ea:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80028ec:	2200      	movs	r2, #0
{
 80028ee:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80028f0:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80028f2:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80028f4:	2340      	movs	r3, #64	; 0x40
 80028f6:	f000 fe01 	bl	80034fc <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80028fa:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80028fc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	4620      	mov	r0, r4
 8002906:	f000 fdf9 	bl	80034fc <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800290a:	2301      	movs	r3, #1
 800290c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002910:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002914:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002916:	b12b      	cbz	r3, 8002924 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002918:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800291c:	7921      	ldrb	r1, [r4, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4620      	mov	r0, r4
 8002922:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002924:	2000      	movs	r0, #0
 8002926:	bd38      	pop	{r3, r4, r5, pc}

08002928 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002928:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800292a:	2000      	movs	r0, #0
 800292c:	4770      	bx	lr

0800292e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800292e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002932:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002936:	2304      	movs	r3, #4
 8002938:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800293c:	2000      	movs	r0, #0
 800293e:	4770      	bx	lr

08002940 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002940:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002944:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002948:	2000      	movs	r0, #0
 800294a:	4770      	bx	lr

0800294c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800294c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800294e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002952:	2a03      	cmp	r2, #3
 8002954:	d104      	bne.n	8002960 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002956:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	b103      	cbz	r3, 8002960 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800295e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002960:	2000      	movs	r0, #0
 8002962:	bd08      	pop	{r3, pc}

08002964 <USBD_LL_IsoINIncomplete>:
 8002964:	2000      	movs	r0, #0
 8002966:	4770      	bx	lr

08002968 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002968:	2000      	movs	r0, #0
 800296a:	4770      	bx	lr

0800296c <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800296c:	2000      	movs	r0, #0
 800296e:	4770      	bx	lr

08002970 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002970:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002972:	2201      	movs	r2, #1
 8002974:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002978:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800297c:	7901      	ldrb	r1, [r0, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	4790      	blx	r2
   
  return USBD_OK;
}
 8002982:	2000      	movs	r0, #0
 8002984:	bd08      	pop	{r3, pc}

08002986 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002986:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002988:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800298a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800298c:	f000 fdd4 	bl	8003538 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002990:	4620      	mov	r0, r4
 8002992:	2100      	movs	r1, #0
}
 8002994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002998:	f000 bdce 	b.w	8003538 <USBD_LL_StallEP>

0800299c <USBD_StdDevReq>:
{
 800299c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800299e:	784b      	ldrb	r3, [r1, #1]
{
 80029a0:	4604      	mov	r4, r0
 80029a2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d879      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
 80029a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029ac:	00e500c9 	.word	0x00e500c9
 80029b0:	00d90078 	.word	0x00d90078
 80029b4:	006d0078 	.word	0x006d0078
 80029b8:	0078000a 	.word	0x0078000a
 80029bc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80029c0:	884b      	ldrh	r3, [r1, #2]
 80029c2:	0a1a      	lsrs	r2, r3, #8
 80029c4:	3a01      	subs	r2, #1
 80029c6:	2a06      	cmp	r2, #6
 80029c8:	d868      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
 80029ca:	e8df f002 	tbb	[pc, r2]
 80029ce:	1c04      	.short	0x1c04
 80029d0:	49676729 	.word	0x49676729
 80029d4:	52          	.byte	0x52
 80029d5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80029d6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029da:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80029dc:	7c20      	ldrb	r0, [r4, #16]
 80029de:	f10d 0106 	add.w	r1, sp, #6
 80029e2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80029e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	d067      	beq.n	8002abc <USBD_StdDevReq+0x120>
 80029ec:	88eb      	ldrh	r3, [r5, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d064      	beq.n	8002abc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80029f2:	429a      	cmp	r2, r3
 80029f4:	bf28      	it	cs
 80029f6:	461a      	movcs	r2, r3
 80029f8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80029fc:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80029fe:	4620      	mov	r0, r4
 8002a00:	f000 fa30 	bl	8002e64 <USBD_CtlSendData>
 8002a04:	e05a      	b.n	8002abc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002a06:	7c02      	ldrb	r2, [r0, #16]
 8002a08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a0c:	b932      	cbnz	r2, 8002a1c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a10:	f10d 0006 	add.w	r0, sp, #6
 8002a14:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002a16:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a18:	7043      	strb	r3, [r0, #1]
 8002a1a:	e7e3      	b.n	80029e4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	e7f7      	b.n	8002a10 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d83a      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
 8002a26:	e8df f003 	tbb	[pc, r3]
 8002a2a:	0703      	.short	0x0703
 8002a2c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002a30:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	e7d1      	b.n	80029dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002a38:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	e7cd      	b.n	80029dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002a40:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	e7c9      	b.n	80029dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002a48:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	e7c5      	b.n	80029dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002a50:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	e7c1      	b.n	80029dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002a58:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	e7bd      	b.n	80029dc <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002a60:	7c03      	ldrb	r3, [r0, #16]
 8002a62:	b9db      	cbnz	r3, 8002a9c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002a64:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a68:	f10d 0006 	add.w	r0, sp, #6
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	4798      	blx	r3
 8002a70:	e7b8      	b.n	80029e4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002a72:	7c03      	ldrb	r3, [r0, #16]
 8002a74:	b993      	cbnz	r3, 8002a9c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002a76:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a7a:	f10d 0006 	add.w	r0, sp, #6
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a82:	2307      	movs	r3, #7
 8002a84:	e7c8      	b.n	8002a18 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002a86:	888b      	ldrh	r3, [r1, #4]
 8002a88:	b943      	cbnz	r3, 8002a9c <USBD_StdDevReq+0x100>
 8002a8a:	88cb      	ldrh	r3, [r1, #6]
 8002a8c:	b933      	cbnz	r3, 8002a9c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a8e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002a92:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a94:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002a96:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a9a:	d103      	bne.n	8002aa4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7ff ff72 	bl	8002986 <USBD_CtlError.constprop.0>
    break;
 8002aa2:	e00b      	b.n	8002abc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002aa4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f000 fd75 	bl	8003598 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f000 f9f5 	bl	8002e9e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002ab4:	b12d      	cbz	r5, 8002ac2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002ab6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002ab8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002abc:	2000      	movs	r0, #0
 8002abe:	b003      	add	sp, #12
 8002ac0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e7f8      	b.n	8002ab8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002ac6:	7889      	ldrb	r1, [r1, #2]
 8002ac8:	4d30      	ldr	r5, [pc, #192]	; (8002b8c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002aca:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002acc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002ace:	d8e5      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002ad0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d00c      	beq.n	8002af2 <USBD_StdDevReq+0x156>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d1df      	bne.n	8002a9c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002adc:	b9b1      	cbnz	r1, 8002b0c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002ae4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002ae6:	f7ff fe4b 	bl	8002780 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002aea:	4620      	mov	r0, r4
 8002aec:	f000 f9d7 	bl	8002e9e <USBD_CtlSendStatus>
 8002af0:	e7e4      	b.n	8002abc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002af2:	2900      	cmp	r1, #0
 8002af4:	d0f9      	beq.n	8002aea <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002af6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002af8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002afa:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002afc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fe32 	bl	800276a <USBD_SetClassConfig>
 8002b06:	2802      	cmp	r0, #2
 8002b08:	d1ef      	bne.n	8002aea <USBD_StdDevReq+0x14e>
 8002b0a:	e7c7      	b.n	8002a9c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002b0c:	6841      	ldr	r1, [r0, #4]
 8002b0e:	2901      	cmp	r1, #1
 8002b10:	d0eb      	beq.n	8002aea <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002b12:	b2c9      	uxtb	r1, r1
 8002b14:	f7ff fe34 	bl	8002780 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002b18:	7829      	ldrb	r1, [r5, #0]
 8002b1a:	6061      	str	r1, [r4, #4]
 8002b1c:	e7f0      	b.n	8002b00 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002b1e:	88ca      	ldrh	r2, [r1, #6]
 8002b20:	2a01      	cmp	r2, #1
 8002b22:	d1bb      	bne.n	8002a9c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002b24:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d003      	beq.n	8002b34 <USBD_StdDevReq+0x198>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d1b5      	bne.n	8002a9c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002b30:	1d01      	adds	r1, r0, #4
 8002b32:	e764      	b.n	80029fe <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002b34:	4601      	mov	r1, r0
 8002b36:	2300      	movs	r3, #0
 8002b38:	f841 3f08 	str.w	r3, [r1, #8]!
 8002b3c:	e75f      	b.n	80029fe <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002b3e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b42:	3b02      	subs	r3, #2
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d8a9      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = 0;                                   
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002b4c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002b50:	b10b      	cbz	r3, 8002b56 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002b52:	2302      	movs	r3, #2
 8002b54:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002b56:	2202      	movs	r2, #2
 8002b58:	f104 010c 	add.w	r1, r4, #12
 8002b5c:	e74f      	b.n	80029fe <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002b5e:	884b      	ldrh	r3, [r1, #2]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d1ab      	bne.n	8002abc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002b64:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002b68:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4620      	mov	r0, r4
 8002b72:	4798      	blx	r3
 8002b74:	e7b9      	b.n	8002aea <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002b76:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b7a:	3b02      	subs	r3, #2
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d88d      	bhi.n	8002a9c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002b80:	884b      	ldrh	r3, [r1, #2]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d19a      	bne.n	8002abc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002b86:	2300      	movs	r3, #0
 8002b88:	e7ec      	b.n	8002b64 <USBD_StdDevReq+0x1c8>
 8002b8a:	bf00      	nop
 8002b8c:	200001a0 	.word	0x200001a0

08002b90 <USBD_StdItfReq>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002b92:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b96:	2b03      	cmp	r3, #3
{
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002b9c:	d10d      	bne.n	8002bba <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002b9e:	790b      	ldrb	r3, [r1, #4]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d80a      	bhi.n	8002bba <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002ba4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002bac:	88eb      	ldrh	r3, [r5, #6]
 8002bae:	b913      	cbnz	r3, 8002bb6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 f974 	bl	8002e9e <USBD_CtlSendStatus>
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002bba:	f7ff fee4 	bl	8002986 <USBD_CtlError.constprop.0>
    break;
 8002bbe:	e7fa      	b.n	8002bb6 <USBD_StdItfReq+0x26>

08002bc0 <USBD_StdEPReq>:
{
 8002bc0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002bc2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002bc4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002bc6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002bca:	2a20      	cmp	r2, #32
{
 8002bcc:	4604      	mov	r4, r0
 8002bce:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002bd0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002bd2:	d105      	bne.n	8002be0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002bd4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4798      	blx	r3
}
 8002bdc:	2000      	movs	r0, #0
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002be0:	784a      	ldrb	r2, [r1, #1]
 8002be2:	2a01      	cmp	r2, #1
 8002be4:	d01c      	beq.n	8002c20 <USBD_StdEPReq+0x60>
 8002be6:	d32a      	bcc.n	8002c3e <USBD_StdEPReq+0x7e>
 8002be8:	2a03      	cmp	r2, #3
 8002bea:	d1f7      	bne.n	8002bdc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002bec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002bf0:	2a02      	cmp	r2, #2
 8002bf2:	d040      	beq.n	8002c76 <USBD_StdEPReq+0xb6>
 8002bf4:	2a03      	cmp	r2, #3
 8002bf6:	d002      	beq.n	8002bfe <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002bf8:	f7ff fec5 	bl	8002986 <USBD_CtlError.constprop.0>
      break;
 8002bfc:	e7ee      	b.n	8002bdc <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002bfe:	884a      	ldrh	r2, [r1, #2]
 8002c00:	b922      	cbnz	r2, 8002c0c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002c02:	065e      	lsls	r6, r3, #25
 8002c04:	d002      	beq.n	8002c0c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002c06:	4619      	mov	r1, r3
 8002c08:	f000 fc96 	bl	8003538 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002c0c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002c10:	4629      	mov	r1, r5
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4620      	mov	r0, r4
 8002c16:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f000 f940 	bl	8002e9e <USBD_CtlSendStatus>
 8002c1e:	e7dd      	b.n	8002bdc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002c20:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002c24:	2a02      	cmp	r2, #2
 8002c26:	d026      	beq.n	8002c76 <USBD_StdEPReq+0xb6>
 8002c28:	2a03      	cmp	r2, #3
 8002c2a:	d1e5      	bne.n	8002bf8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002c2c:	884a      	ldrh	r2, [r1, #2]
 8002c2e:	2a00      	cmp	r2, #0
 8002c30:	d1d4      	bne.n	8002bdc <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002c32:	0659      	lsls	r1, r3, #25
 8002c34:	d0f0      	beq.n	8002c18 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002c36:	4619      	mov	r1, r3
 8002c38:	f000 fc8c 	bl	8003554 <USBD_LL_ClearStallEP>
 8002c3c:	e7e6      	b.n	8002c0c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002c3e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002c42:	2a02      	cmp	r2, #2
 8002c44:	d017      	beq.n	8002c76 <USBD_StdEPReq+0xb6>
 8002c46:	2a03      	cmp	r2, #3
 8002c48:	d1d6      	bne.n	8002bf8 <USBD_StdEPReq+0x38>
 8002c4a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002c4e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002c52:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002c56:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002c58:	bf14      	ite	ne
 8002c5a:	3514      	addne	r5, #20
 8002c5c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002c60:	f000 fc86 	bl	8003570 <USBD_LL_IsStallEP>
 8002c64:	b168      	cbz	r0, 8002c82 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002c66:	2301      	movs	r3, #1
 8002c68:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f000 f8f8 	bl	8002e64 <USBD_CtlSendData>
      break;
 8002c74:	e7b2      	b.n	8002bdc <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002c76:	065a      	lsls	r2, r3, #25
 8002c78:	d0b0      	beq.n	8002bdc <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f000 fc5c 	bl	8003538 <USBD_LL_StallEP>
 8002c80:	e7ac      	b.n	8002bdc <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002c82:	6028      	str	r0, [r5, #0]
 8002c84:	e7f1      	b.n	8002c6a <USBD_StdEPReq+0xaa>

08002c86 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002c86:	780b      	ldrb	r3, [r1, #0]
 8002c88:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002c8a:	784b      	ldrb	r3, [r1, #1]
 8002c8c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002c8e:	78ca      	ldrb	r2, [r1, #3]
 8002c90:	788b      	ldrb	r3, [r1, #2]
 8002c92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c96:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002c98:	794a      	ldrb	r2, [r1, #5]
 8002c9a:	790b      	ldrb	r3, [r1, #4]
 8002c9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002ca0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002ca2:	79ca      	ldrb	r2, [r1, #7]
 8002ca4:	798b      	ldrb	r3, [r1, #6]
 8002ca6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002caa:	80c3      	strh	r3, [r0, #6]
 8002cac:	4770      	bx	lr

08002cae <USBD_CtlError>:
{
 8002cae:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8002cb0:	2180      	movs	r1, #128	; 0x80
{
 8002cb2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002cb4:	f000 fc40 	bl	8003538 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	2100      	movs	r1, #0
}
 8002cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002cc0:	f000 bc3a 	b.w	8003538 <USBD_LL_StallEP>

08002cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002cc4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002cc6:	b188      	cbz	r0, 8002cec <USBD_GetString+0x28>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2c00      	cmp	r4, #0
 8002cd4:	d1f9      	bne.n	8002cca <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	3302      	adds	r3, #2
 8002cda:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002cdc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	704b      	strb	r3, [r1, #1]
 8002ce2:	3801      	subs	r0, #1
 8002ce4:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002ce6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002cea:	b905      	cbnz	r5, 8002cee <USBD_GetString+0x2a>
 8002cec:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	548c      	strb	r4, [r1, r2]
 8002cfa:	e7f4      	b.n	8002ce6 <USBD_GetString+0x22>

08002cfc <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8002cfc:	2329      	movs	r3, #41	; 0x29
 8002cfe:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8002d00:	4800      	ldr	r0, [pc, #0]	; (8002d04 <USBD_HID_GetCfgDesc+0x8>)
 8002d02:	4770      	bx	lr
 8002d04:	200000a4 	.word	0x200000a4

08002d08 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002d08:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002d10:	4770      	bx	lr
	...

08002d14 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002d14:	230a      	movs	r3, #10
 8002d16:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8002d18:	4800      	ldr	r0, [pc, #0]	; (8002d1c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8002d1a:	4770      	bx	lr
 8002d1c:	200000dc 	.word	0x200000dc

08002d20 <USBD_HID_DataOut>:
{
 8002d20:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, rx_buf, USBD_HID_OUTREPORT_BUF_SIZE);
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <USBD_HID_DataOut+0x18>)
 8002d24:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d28:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	f7fe f96c 	bl	800100a <HAL_PCD_EP_Receive>
}
 8002d32:	2000      	movs	r0, #0
 8002d34:	bd08      	pop	{r3, pc}
 8002d36:	bf00      	nop
 8002d38:	200001a1 	.word	0x200001a1

08002d3c <USBD_HID_Setup>:
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d3e:	780c      	ldrb	r4, [r1, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8002d40:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d44:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8002d48:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d4a:	d023      	beq.n	8002d94 <USBD_HID_Setup+0x58>
 8002d4c:	2c20      	cmp	r4, #32
 8002d4e:	d10c      	bne.n	8002d6a <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8002d50:	784a      	ldrb	r2, [r1, #1]
 8002d52:	3a02      	subs	r2, #2
 8002d54:	2a09      	cmp	r2, #9
 8002d56:	d817      	bhi.n	8002d88 <USBD_HID_Setup+0x4c>
 8002d58:	e8df f002 	tbb	[pc, r2]
 8002d5c:	16160913 	.word	0x16160913
 8002d60:	16161616 	.word	0x16161616
 8002d64:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 8002d66:	788a      	ldrb	r2, [r1, #2]
 8002d68:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	e010      	b.n	8002d90 <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 f876 	bl	8002e64 <USBD_CtlSendData>
 8002d78:	e7f7      	b.n	8002d6a <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002d7a:	884a      	ldrh	r2, [r1, #2]
 8002d7c:	0a12      	lsrs	r2, r2, #8
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e7f3      	b.n	8002d6a <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8002d82:	2201      	movs	r2, #1
 8002d84:	1d19      	adds	r1, r3, #4
 8002d86:	e7f4      	b.n	8002d72 <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff ff90 	bl	8002cae <USBD_CtlError>
      return USBD_FAIL; 
 8002d8e:	2402      	movs	r4, #2
}
 8002d90:	4620      	mov	r0, r4
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8002d94:	784a      	ldrb	r2, [r1, #1]
 8002d96:	2a0a      	cmp	r2, #10
 8002d98:	d018      	beq.n	8002dcc <USBD_HID_Setup+0x90>
 8002d9a:	2a0b      	cmp	r2, #11
 8002d9c:	d01c      	beq.n	8002dd8 <USBD_HID_Setup+0x9c>
 8002d9e:	2a06      	cmp	r2, #6
 8002da0:	d1f6      	bne.n	8002d90 <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8002da2:	884b      	ldrh	r3, [r1, #2]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	2b22      	cmp	r3, #34	; 0x22
 8002da8:	d105      	bne.n	8002db6 <USBD_HID_Setup+0x7a>
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8002daa:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_CUSTOM_ReportDesc;
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <USBD_HID_Setup+0xa4>)
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8002dae:	2a6a      	cmp	r2, #106	; 0x6a
 8002db0:	bf28      	it	cs
 8002db2:	226a      	movcs	r2, #106	; 0x6a
 8002db4:	e7dd      	b.n	8002d72 <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002db6:	2b21      	cmp	r3, #33	; 0x21
 8002db8:	d105      	bne.n	8002dc6 <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002dba:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 8002dbc:	4909      	ldr	r1, [pc, #36]	; (8002de4 <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002dbe:	2a09      	cmp	r2, #9
 8002dc0:	bf28      	it	cs
 8002dc2:	2209      	movcs	r2, #9
 8002dc4:	e7d5      	b.n	8002d72 <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 8002dc6:	4621      	mov	r1, r4
  uint16_t len = 0;
 8002dc8:	4622      	mov	r2, r4
 8002dca:	e7d2      	b.n	8002d72 <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f103 0108 	add.w	r1, r3, #8
 8002dd2:	f000 f847 	bl	8002e64 <USBD_CtlSendData>
      break;
 8002dd6:	e7db      	b.n	8002d90 <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002dd8:	788a      	ldrb	r2, [r1, #2]
 8002dda:	609a      	str	r2, [r3, #8]
      break;
 8002ddc:	e7d8      	b.n	8002d90 <USBD_HID_Setup+0x54>
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000
 8002de4:	200000d0 	.word	0x200000d0

08002de8 <USBD_HID_DeInit>:
{
 8002de8:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002dea:	2181      	movs	r1, #129	; 0x81
{
 8002dec:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002dee:	f000 fb95 	bl	800351c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002df2:	2101      	movs	r1, #1
 8002df4:	4620      	mov	r0, r4
 8002df6:	f000 fb91 	bl	800351c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002dfa:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002dfe:	b120      	cbz	r0, 8002e0a <USBD_HID_DeInit+0x22>
    USBD_free(pdev->pClassData);
 8002e00:	f000 fc9c 	bl	800373c <free>
    pdev->pClassData = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	bd10      	pop	{r4, pc}

08002e0e <USBD_HID_Init>:
{
 8002e0e:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 8002e10:	2305      	movs	r3, #5
{
 8002e12:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002e14:	2203      	movs	r2, #3
 8002e16:	2181      	movs	r1, #129	; 0x81
 8002e18:	f000 fb70 	bl	80034fc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002e1c:	2340      	movs	r3, #64	; 0x40
 8002e1e:	2203      	movs	r2, #3
 8002e20:	2101      	movs	r1, #1
 8002e22:	4620      	mov	r0, r4
 8002e24:	f000 fb6a 	bl	80034fc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8002e28:	2010      	movs	r0, #16
 8002e2a:	f000 fc7f 	bl	800372c <malloc>
 8002e2e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002e32:	b118      	cbz	r0, 8002e3c <USBD_HID_Init+0x2e>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd10      	pop	{r4, pc}
    ret = 1; 
 8002e3c:	2001      	movs	r0, #1
}
 8002e3e:	bd10      	pop	{r4, pc}

08002e40 <USBD_HID_SendReport>:
{
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002e44:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e48:	2a03      	cmp	r2, #3
 8002e4a:	d109      	bne.n	8002e60 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8002e4c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == HID_IDLE)
 8002e50:	7b22      	ldrb	r2, [r4, #12]
 8002e52:	b92a      	cbnz	r2, 8002e60 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002e54:	2201      	movs	r2, #1
 8002e56:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8002e58:	460a      	mov	r2, r1
 8002e5a:	2181      	movs	r1, #129	; 0x81
 8002e5c:	f000 fbaa 	bl	80035b4 <USBD_LL_Transmit>
}
 8002e60:	2000      	movs	r0, #0
 8002e62:	bd10      	pop	{r4, pc}

08002e64 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002e6e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e70:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002e72:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e74:	2100      	movs	r1, #0
 8002e76:	f000 fb9d 	bl	80035b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002e7e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002e80:	4613      	mov	r3, r2
 8002e82:	460a      	mov	r2, r1
 8002e84:	2100      	movs	r1, #0
 8002e86:	f000 fb95 	bl	80035b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	bd08      	pop	{r3, pc}

08002e8e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002e8e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002e90:	4613      	mov	r3, r2
 8002e92:	460a      	mov	r2, r1
 8002e94:	2100      	movs	r1, #0
 8002e96:	f000 fb9b 	bl	80035d0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bd08      	pop	{r3, pc}

08002e9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002e9e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f000 fb82 	bl	80035b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	bd08      	pop	{r3, pc}

08002eb4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002eb4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f000 fb85 	bl	80035d0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	bd08      	pop	{r3, pc}
	...

08002ecc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8002ed2:	4f28      	ldr	r7, [pc, #160]	; (8002f74 <MX_GPIO_Init+0xa8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ed4:	4d28      	ldr	r5, [pc, #160]	; (8002f78 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	9401      	str	r4, [sp, #4]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	f042 0204 	orr.w	r2, r2, #4
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee4:	f002 0204 	and.w	r2, r2, #4
 8002ee8:	9201      	str	r2, [sp, #4]
 8002eea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eec:	9402      	str	r4, [sp, #8]
 8002eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002efc:	9202      	str	r2, [sp, #8]
 8002efe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	9403      	str	r4, [sp, #12]
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0c:	f002 0201 	and.w	r2, r2, #1
 8002f10:	9203      	str	r2, [sp, #12]
 8002f12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f14:	9404      	str	r4, [sp, #16]
 8002f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f18:	f042 0202 	orr.w	r2, r2, #2
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f26:	4622      	mov	r2, r4
 8002f28:	4638      	mov	r0, r7
 8002f2a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f30:	f7fd fcd2 	bl	80008d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002f34:	4622      	mov	r2, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f3c:	f7fd fccc 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002f42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f46:	a905      	add	r1, sp, #20
 8002f48:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002f4a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f52:	f7fd fbdb 	bl	800070c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f56:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	a905      	add	r1, sp, #20
 8002f5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f7fd fbd1 	bl	800070c <HAL_GPIO_Init>

}
 8002f6a:	b00b      	add	sp, #44	; 0x2c
 8002f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020000 	.word	0x40020000

08002f7c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <SystemClock_Config+0xa8>)
 8002f82:	2100      	movs	r1, #0
 8002f84:	9101      	str	r1, [sp, #4]
 8002f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <SystemClock_Config+0xac>)
 8002f9a:	9102      	str	r1, [sp, #8]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fbc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002fc2:	2378      	movs	r3, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002fc6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002fca:	2305      	movs	r3, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fcc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fce:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002fd0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd2:	f7fe f8d5 	bl	8001180 <HAL_RCC_OscConfig>
 8002fd6:	b100      	cbz	r0, 8002fda <SystemClock_Config+0x5e>
 8002fd8:	e7fe      	b.n	8002fd8 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fda:	230f      	movs	r3, #15
 8002fdc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fe4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fe6:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fec:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fee:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ff0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ff2:	f7fe fa61 	bl	80014b8 <HAL_RCC_ClockConfig>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	b100      	cbz	r0, 8002ffc <SystemClock_Config+0x80>
 8002ffa:	e7fe      	b.n	8002ffa <SystemClock_Config+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ffc:	f7fe faf6 	bl	80015ec <HAL_RCC_GetHCLKFreq>
 8003000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003004:	fbb0 f0f3 	udiv	r0, r0, r3
 8003008:	f7fd fb58 	bl	80006bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800300c:	2004      	movs	r0, #4
 800300e:	f7fd fb6b 	bl	80006e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003012:	4622      	mov	r2, r4
 8003014:	4621      	mov	r1, r4
 8003016:	f04f 30ff 	mov.w	r0, #4294967295
 800301a:	f7fd fb0f 	bl	800063c <HAL_NVIC_SetPriority>
}
 800301e:	b014      	add	sp, #80	; 0x50
 8003020:	bd10      	pop	{r4, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000

0800302c <read_key>:
{

}

GPIO_PinState read_key(uint16_t row_pin, uint16_t col_pin)
{
 800302c:	b570      	push	{r4, r5, r6, lr}
	SET_ROW(row_pin);
 800302e:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <read_key+0x2c>)
{
 8003030:	4605      	mov	r5, r0
 8003032:	460e      	mov	r6, r1
	SET_ROW(row_pin);
 8003034:	2201      	movs	r2, #1
 8003036:	4601      	mov	r1, r0
 8003038:	4620      	mov	r0, r4
 800303a:	f7fd fc4d 	bl	80008d8 <HAL_GPIO_WritePin>
	GPIO_PinState col_state = HAL_GPIO_ReadPin(COL_GPIO, col_pin);
 800303e:	4631      	mov	r1, r6
 8003040:	4806      	ldr	r0, [pc, #24]	; (800305c <read_key+0x30>)
 8003042:	f7fd fc43 	bl	80008cc <HAL_GPIO_ReadPin>
	RESET_ROW(row_pin);
 8003046:	2200      	movs	r2, #0
	GPIO_PinState col_state = HAL_GPIO_ReadPin(COL_GPIO, col_pin);
 8003048:	4606      	mov	r6, r0
	RESET_ROW(row_pin);
 800304a:	4629      	mov	r1, r5
 800304c:	4620      	mov	r0, r4
 800304e:	f7fd fc43 	bl	80008d8 <HAL_GPIO_WritePin>

	return col_state;
}
 8003052:	4630      	mov	r0, r6
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	bf00      	nop
 8003058:	40020800 	.word	0x40020800
 800305c:	40020000 	.word	0x40020000

08003060 <main>:
{
 8003060:	b507      	push	{r0, r1, r2, lr}
  mediaHID.id = 2;
 8003062:	2302      	movs	r3, #2
  mediaHID.keys = 0;
 8003064:	2400      	movs	r4, #0
  mediaHID.id = 2;
 8003066:	f88d 3004 	strb.w	r3, [sp, #4]
  mediaHID.keys = 0;
 800306a:	f88d 4005 	strb.w	r4, [sp, #5]
  HAL_Init();
 800306e:	f7fd fa9b 	bl	80005a8 <HAL_Init>
  SystemClock_Config();
 8003072:	f7ff ff83 	bl	8002f7c <SystemClock_Config>
  MX_GPIO_Init();
 8003076:	f7ff ff29 	bl	8002ecc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800307a:	f000 f907 	bl	800328c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800307e:	f000 f94f 	bl	8003320 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8003082:	f000 f8a3 	bl	80031cc <MX_TIM2_Init>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003086:	4622      	mov	r2, r4
 8003088:	4621      	mov	r1, r4
 800308a:	201c      	movs	r0, #28
 800308c:	f7fd fad6 	bl	800063c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003090:	201c      	movs	r0, #28
 8003092:	f7fd fb07 	bl	80006a4 <HAL_NVIC_EnableIRQ>
		 USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID, sizeof(struct mediaHID_t));
 8003096:	4c0f      	ldr	r4, [pc, #60]	; (80030d4 <main+0x74>)
	  if (read_key(ROW_0, COL_0))
 8003098:	2108      	movs	r1, #8
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff ffc6 	bl	800302c <read_key>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d0f9      	beq.n	8003098 <main+0x38>
		 mediaHID.keys = USB_HID_VOL_DEC;
 80030a4:	2380      	movs	r3, #128	; 0x80
		 USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID, sizeof(struct mediaHID_t));
 80030a6:	a901      	add	r1, sp, #4
 80030a8:	2202      	movs	r2, #2
 80030aa:	4620      	mov	r0, r4
		 mediaHID.keys = USB_HID_VOL_DEC;
 80030ac:	f88d 3005 	strb.w	r3, [sp, #5]
		 USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID, sizeof(struct mediaHID_t));
 80030b0:	f7ff fec6 	bl	8002e40 <USBD_HID_SendReport>
		 HAL_Delay(30);
 80030b4:	201e      	movs	r0, #30
 80030b6:	f7fd fa9f 	bl	80005f8 <HAL_Delay>
		 mediaHID.keys = 0;
 80030ba:	2300      	movs	r3, #0
		 USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID, sizeof(struct mediaHID_t));
 80030bc:	2202      	movs	r2, #2
 80030be:	a901      	add	r1, sp, #4
 80030c0:	4620      	mov	r0, r4
		 mediaHID.keys = 0;
 80030c2:	f88d 3005 	strb.w	r3, [sp, #5]
		 USBD_HID_SendReport(&hUsbDeviceFS, &mediaHID, sizeof(struct mediaHID_t));
 80030c6:	f7ff febb 	bl	8002e40 <USBD_HID_SendReport>
		 HAL_Delay(30);
 80030ca:	201e      	movs	r0, #30
 80030cc:	f7fd fa94 	bl	80005f8 <HAL_Delay>
 80030d0:	e7e2      	b.n	8003098 <main+0x38>
 80030d2:	bf00      	nop
 80030d4:	200003d4 	.word	0x200003d4

080030d8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	TOGGLE_LED(LED_RED);
 80030d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030dc:	4801      	ldr	r0, [pc, #4]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80030de:	f7fd bc00 	b.w	80008e2 <HAL_GPIO_TogglePin>
 80030e2:	bf00      	nop
 80030e4:	40020800 	.word	0x40020800

080030e8 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80030e8:	e7fe      	b.n	80030e8 <_Error_Handler>

080030ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ec:	2003      	movs	r0, #3
 80030ee:	f7fd fa93 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	4611      	mov	r1, r2
 80030f6:	f06f 000b 	mvn.w	r0, #11
 80030fa:	f7fd fa9f 	bl	800063c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	4611      	mov	r1, r2
 8003102:	f06f 000a 	mvn.w	r0, #10
 8003106:	f7fd fa99 	bl	800063c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	4611      	mov	r1, r2
 800310e:	f06f 0009 	mvn.w	r0, #9
 8003112:	f7fd fa93 	bl	800063c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	4611      	mov	r1, r2
 800311a:	f06f 0004 	mvn.w	r0, #4
 800311e:	f7fd fa8d 	bl	800063c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	4611      	mov	r1, r2
 8003126:	f06f 0003 	mvn.w	r0, #3
 800312a:	f7fd fa87 	bl	800063c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	4611      	mov	r1, r2
 8003132:	f06f 0001 	mvn.w	r0, #1
 8003136:	f7fd fa81 	bl	800063c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	4611      	mov	r1, r2
 800313e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003146:	f7fd ba79 	b.w	800063c <HAL_NVIC_SetPriority>

0800314a <NMI_Handler>:
 800314a:	4770      	bx	lr

0800314c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800314c:	e7fe      	b.n	800314c <HardFault_Handler>

0800314e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800314e:	e7fe      	b.n	800314e <MemManage_Handler>

08003150 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003150:	e7fe      	b.n	8003150 <BusFault_Handler>

08003152 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003152:	e7fe      	b.n	8003152 <UsageFault_Handler>

08003154 <SVC_Handler>:
 8003154:	4770      	bx	lr

08003156 <DebugMon_Handler>:
 8003156:	4770      	bx	lr

08003158 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003158:	4770      	bx	lr

0800315a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800315a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800315c:	f7fd fa3e 	bl	80005dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003164:	f7fd bacd 	b.w	8000702 <HAL_SYSTICK_IRQHandler>

08003168 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <TIM2_IRQHandler+0x8>)
 800316a:	f7fe bba7 	b.w	80018bc <HAL_TIM_IRQHandler>
 800316e:	bf00      	nop
 8003170:	20000358 	.word	0x20000358

08003174 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <OTG_FS_IRQHandler+0x8>)
 8003176:	f7fd bc39 	b.w	80009ec <HAL_PCD_IRQHandler>
 800317a:	bf00      	nop
 800317c:	200005f8 	.word	0x200005f8

08003180 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003180:	490f      	ldr	r1, [pc, #60]	; (80031c0 <SystemInit+0x40>)
 8003182:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003186:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <SystemInit+0x44>)
 8003190:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003192:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800319a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80031a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <SystemInit+0x48>)
 80031aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031b4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ba:	608b      	str	r3, [r1, #8]
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	24003010 	.word	0x24003010

080031cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031cc:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80031ce:	4822      	ldr	r0, [pc, #136]	; (8003258 <MX_TIM2_Init+0x8c>)
  htim2.Init.Prescaler = 10;
 80031d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d4:	230a      	movs	r3, #10
 80031d6:	e880 000c 	stmia.w	r0, {r2, r3}
{
 80031da:	b08e      	sub	sp, #56	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031dc:	2300      	movs	r3, #0
  htim2.Init.Period = 10000 - 1;
 80031de:	f242 720f 	movw	r2, #9999	; 0x270f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000 - 1;
 80031e4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e6:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031e8:	f7fe fc6e 	bl	8001ac8 <HAL_TIM_Base_Init>
 80031ec:	b118      	cbz	r0, 80031f6 <MX_TIM2_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031ee:	2149      	movs	r1, #73	; 0x49
 80031f0:	481a      	ldr	r0, [pc, #104]	; (800325c <MX_TIM2_Init+0x90>)
 80031f2:	f7ff ff79 	bl	80030e8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f6:	a90e      	add	r1, sp, #56	; 0x38
 80031f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031fc:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003200:	4815      	ldr	r0, [pc, #84]	; (8003258 <MX_TIM2_Init+0x8c>)
 8003202:	f7fe fa9e 	bl	8001742 <HAL_TIM_ConfigClockSource>
 8003206:	b118      	cbz	r0, 8003210 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003208:	214f      	movs	r1, #79	; 0x4f
 800320a:	4814      	ldr	r0, [pc, #80]	; (800325c <MX_TIM2_Init+0x90>)
 800320c:	f7ff ff6c 	bl	80030e8 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003210:	4811      	ldr	r0, [pc, #68]	; (8003258 <MX_TIM2_Init+0x8c>)
 8003212:	f7fe fc73 	bl	8001afc <HAL_TIM_OC_Init>
 8003216:	b118      	cbz	r0, 8003220 <MX_TIM2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003218:	2154      	movs	r1, #84	; 0x54
 800321a:	4810      	ldr	r0, [pc, #64]	; (800325c <MX_TIM2_Init+0x90>)
 800321c:	f7ff ff64 	bl	80030e8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003220:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003222:	a901      	add	r1, sp, #4
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <MX_TIM2_Init+0x8c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003228:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800322a:	f7fe fcdf 	bl	8001bec <HAL_TIMEx_MasterConfigSynchronization>
 800322e:	b118      	cbz	r0, 8003238 <MX_TIM2_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003230:	215b      	movs	r1, #91	; 0x5b
 8003232:	480a      	ldr	r0, [pc, #40]	; (800325c <MX_TIM2_Init+0x90>)
 8003234:	f7ff ff58 	bl	80030e8 <_Error_Handler>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003238:	2200      	movs	r2, #0
 800323a:	a907      	add	r1, sp, #28
 800323c:	4806      	ldr	r0, [pc, #24]	; (8003258 <MX_TIM2_Init+0x8c>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800323e:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8003240:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003242:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003244:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003246:	f7fe fca3 	bl	8001b90 <HAL_TIM_OC_ConfigChannel>
 800324a:	b118      	cbz	r0, 8003254 <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 800324c:	2164      	movs	r1, #100	; 0x64
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <MX_TIM2_Init+0x90>)
 8003250:	f7ff ff4a 	bl	80030e8 <_Error_Handler>
  }

}
 8003254:	b00e      	add	sp, #56	; 0x38
 8003256:	bd10      	pop	{r4, pc}
 8003258:	20000358 	.word	0x20000358
 800325c:	080046bf 	.word	0x080046bf

08003260 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003260:	6803      	ldr	r3, [r0, #0]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003266:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8003268:	d10b      	bne.n	8003282 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_TIM_Base_MspInit+0x28>)
 8003270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003282:	b002      	add	sp, #8
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800

0800328c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800328c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <MX_USART3_UART_Init+0x38>)
 8003292:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003296:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800329a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800329c:	2300      	movs	r3, #0
 800329e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032a0:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032a2:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032a4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032aa:	f7fe fddd 	bl	8001e68 <HAL_UART_Init>
 80032ae:	b128      	cbz	r0, 80032bc <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032b0:	214c      	movs	r1, #76	; 0x4c
 80032b2:	4805      	ldr	r0, [pc, #20]	; (80032c8 <MX_USART3_UART_Init+0x3c>)
  }

}
 80032b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80032b8:	f7ff bf16 	b.w	80030e8 <_Error_Handler>
 80032bc:	bd08      	pop	{r3, pc}
 80032be:	bf00      	nop
 80032c0:	20000394 	.word	0x20000394
 80032c4:	40004800 	.word	0x40004800
 80032c8:	080046cc 	.word	0x080046cc

080032cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 80032ce:	6802      	ldr	r2, [r0, #0]
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_UART_MspInit+0x48>)
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d11a      	bne.n	800330c <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032dc:	480f      	ldr	r0, [pc, #60]	; (800331c <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80032de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003302:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003304:	2307      	movs	r3, #7
 8003306:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003308:	f7fd fa00 	bl	800070c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800330c:	b007      	add	sp, #28
 800330e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003312:	bf00      	nop
 8003314:	40004800 	.word	0x40004800
 8003318:	40023800 	.word	0x40023800
 800331c:	40020800 	.word	0x40020800

08003320 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8003320:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003322:	4c07      	ldr	r4, [pc, #28]	; (8003340 <MX_USB_DEVICE_Init+0x20>)
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <MX_USB_DEVICE_Init+0x24>)
 8003326:	2200      	movs	r2, #0
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff f9e1 	bl	80026f0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 800332e:	4620      	mov	r0, r4
 8003330:	4905      	ldr	r1, [pc, #20]	; (8003348 <MX_USB_DEVICE_Init+0x28>)
 8003332:	f7ff f9ff 	bl	8002734 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8003336:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 800333c:	f7ff ba10 	b.w	8002760 <USBD_Start>
 8003340:	200003d4 	.word	0x200003d4
 8003344:	200000ec 	.word	0x200000ec
 8003348:	2000006c 	.word	0x2000006c

0800334c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800334c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003354:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8003356:	d12e      	bne.n	80033b6 <HAL_PCD_MspInit+0x6a>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003358:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800335a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	a901      	add	r1, sp, #4
 8003360:	4816      	ldr	r0, [pc, #88]	; (80033bc <HAL_PCD_MspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003362:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f7fd f9d0 	bl	800070c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800336c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003370:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800337c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	480f      	ldr	r0, [pc, #60]	; (80033bc <HAL_PCD_MspInit+0x70>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003380:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	f7fd f9c2 	bl	800070c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_PCD_MspInit+0x74>)
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003390:	635a      	str	r2, [r3, #52]	; 0x34
 8003392:	9400      	str	r4, [sp, #0]
 8003394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80033a4:	2043      	movs	r0, #67	; 0x43
 80033a6:	4622      	mov	r2, r4
 80033a8:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80033aa:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80033ac:	f7fd f946 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80033b0:	2043      	movs	r0, #67	; 0x43
 80033b2:	f7fd f977 	bl	80006a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80033b6:	b006      	add	sp, #24
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	bf00      	nop
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80033c4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80033c8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033cc:	f7ff b9df 	b.w	800278e <USBD_LL_SetupStage>

080033d0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80033d0:	231c      	movs	r3, #28
 80033d2:	fb03 0301 	mla	r3, r3, r1, r0
 80033d6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033de:	f7ff ba03 	b.w	80027e8 <USBD_LL_DataOutStage>

080033e2 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80033e2:	231c      	movs	r3, #28
 80033e4:	fb03 0301 	mla	r3, r3, r1, r0
 80033e8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ee:	f7ff ba2d 	b.w	800284c <USBD_LL_DataInStage>

080033f2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80033f2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033f6:	f7ff baa9 	b.w	800294c <USBD_LL_SOF>

080033fa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80033fa:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80033fc:	68c1      	ldr	r1, [r0, #12]
{ 
 80033fe:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003400:	3100      	adds	r1, #0
 8003402:	bf18      	it	ne
 8003404:	2101      	movne	r1, #1
 8003406:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800340a:	f7ff fa8d 	bl	8002928 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800340e:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8003412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003416:	f7ff ba68 	b.w	80028ea <USBD_LL_Reset>
	...

0800341c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003420:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003424:	f7ff fa83 	bl	800292e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003436:	6a23      	ldr	r3, [r4, #32]
 8003438:	b123      	cbz	r3, 8003444 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_PCD_SuspendCallback+0x2c>)
 800343c:	6913      	ldr	r3, [r2, #16]
 800343e:	f043 0306 	orr.w	r3, r3, #6
 8003442:	6113      	str	r3, [r2, #16]
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800344c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003450:	f7ff ba76 	b.w	8002940 <USBD_LL_Resume>

08003454 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003454:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003458:	f7ff ba86 	b.w	8002968 <USBD_LL_IsoOUTIncomplete>

0800345c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800345c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003460:	f7ff ba80 	b.w	8002964 <USBD_LL_IsoINIncomplete>

08003464 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003464:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003468:	f7ff ba80 	b.w	800296c <USBD_LL_DevConnected>

0800346c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800346c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003470:	f7ff ba7e 	b.w	8002970 <USBD_LL_DevDisconnected>

08003474 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003474:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8003476:	7802      	ldrb	r2, [r0, #0]
 8003478:	bb5a      	cbnz	r2, 80034d2 <USBD_LL_Init+0x5e>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800347c:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 800347e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 8003482:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003486:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800348a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800348e:	2102      	movs	r1, #2
 8003490:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003492:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003494:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003496:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800349a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800349c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800349e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80034a2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80034a6:	f7fd fa20 	bl	80008ea <HAL_PCD_Init>
 80034aa:	b120      	cbz	r0, 80034b6 <USBD_LL_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034ac:	f240 113b 	movw	r1, #315	; 0x13b
 80034b0:	480a      	ldr	r0, [pc, #40]	; (80034dc <USBD_LL_Init+0x68>)
 80034b2:	f7ff fe19 	bl	80030e8 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	4807      	ldr	r0, [pc, #28]	; (80034d8 <USBD_LL_Init+0x64>)
 80034ba:	f7fd fe5c 	bl	8001176 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	2100      	movs	r1, #0
 80034c2:	4805      	ldr	r0, [pc, #20]	; (80034d8 <USBD_LL_Init+0x64>)
 80034c4:	f7fd fe36 	bl	8001134 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	2101      	movs	r1, #1
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <USBD_LL_Init+0x64>)
 80034ce:	f7fd fe31 	bl	8001134 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80034d2:	2000      	movs	r0, #0
 80034d4:	bd08      	pop	{r3, pc}
 80034d6:	bf00      	nop
 80034d8:	200005f8 	.word	0x200005f8
 80034dc:	080046df 	.word	0x080046df

080034e0 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80034e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80034e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034e6:	f7fd fa6c 	bl	80009c2 <HAL_PCD_Start>
 80034ea:	2803      	cmp	r0, #3
 80034ec:	bf9a      	itte	ls
 80034ee:	4b02      	ldrls	r3, [pc, #8]	; (80034f8 <USBD_LL_Start+0x18>)
 80034f0:	5c18      	ldrbls	r0, [r3, r0]
 80034f2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80034f4:	bd08      	pop	{r3, pc}
 80034f6:	bf00      	nop
 80034f8:	080046db 	.word	0x080046db

080034fc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80034fc:	b510      	push	{r4, lr}
 80034fe:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003500:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003504:	4613      	mov	r3, r2
 8003506:	4622      	mov	r2, r4
 8003508:	f7fd fd2e 	bl	8000f68 <HAL_PCD_EP_Open>
 800350c:	2803      	cmp	r0, #3
 800350e:	bf9a      	itte	ls
 8003510:	4b01      	ldrls	r3, [pc, #4]	; (8003518 <USBD_LL_OpenEP+0x1c>)
 8003512:	5c18      	ldrbls	r0, [r3, r0]
 8003514:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003516:	bd10      	pop	{r4, pc}
 8003518:	080046db 	.word	0x080046db

0800351c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800351c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800351e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003522:	f7fd fd4f 	bl	8000fc4 <HAL_PCD_EP_Close>
 8003526:	2803      	cmp	r0, #3
 8003528:	bf9a      	itte	ls
 800352a:	4b02      	ldrls	r3, [pc, #8]	; (8003534 <USBD_LL_CloseEP+0x18>)
 800352c:	5c18      	ldrbls	r0, [r3, r0]
 800352e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003530:	bd08      	pop	{r3, pc}
 8003532:	bf00      	nop
 8003534:	080046db 	.word	0x080046db

08003538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003538:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800353a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800353e:	f7fd fda8 	bl	8001092 <HAL_PCD_EP_SetStall>
 8003542:	2803      	cmp	r0, #3
 8003544:	bf9a      	itte	ls
 8003546:	4b02      	ldrls	r3, [pc, #8]	; (8003550 <USBD_LL_StallEP+0x18>)
 8003548:	5c18      	ldrbls	r0, [r3, r0]
 800354a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800354c:	bd08      	pop	{r3, pc}
 800354e:	bf00      	nop
 8003550:	080046db 	.word	0x080046db

08003554 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003554:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003556:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800355a:	f7fd fdc6 	bl	80010ea <HAL_PCD_EP_ClrStall>
 800355e:	2803      	cmp	r0, #3
 8003560:	bf9a      	itte	ls
 8003562:	4b02      	ldrls	r3, [pc, #8]	; (800356c <USBD_LL_ClearStallEP+0x18>)
 8003564:	5c18      	ldrbls	r0, [r3, r0]
 8003566:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003568:	bd08      	pop	{r3, pc}
 800356a:	bf00      	nop
 800356c:	080046db 	.word	0x080046db

08003570 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003570:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003574:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003578:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800357c:	bf1b      	ittet	ne
 800357e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003582:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003586:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800358a:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800358e:	bf08      	it	eq
 8003590:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003594:	4770      	bx	lr
	...

08003598 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003598:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800359a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800359e:	f7fd fcd1 	bl	8000f44 <HAL_PCD_SetAddress>
 80035a2:	2803      	cmp	r0, #3
 80035a4:	bf9a      	itte	ls
 80035a6:	4b02      	ldrls	r3, [pc, #8]	; (80035b0 <USBD_LL_SetUSBAddress+0x18>)
 80035a8:	5c18      	ldrbls	r0, [r3, r0]
 80035aa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80035ac:	bd08      	pop	{r3, pc}
 80035ae:	bf00      	nop
 80035b0:	080046db 	.word	0x080046db

080035b4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80035b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80035b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035ba:	f7fd fd4a 	bl	8001052 <HAL_PCD_EP_Transmit>
 80035be:	2803      	cmp	r0, #3
 80035c0:	bf9a      	itte	ls
 80035c2:	4b02      	ldrls	r3, [pc, #8]	; (80035cc <USBD_LL_Transmit+0x18>)
 80035c4:	5c18      	ldrbls	r0, [r3, r0]
 80035c6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80035c8:	bd08      	pop	{r3, pc}
 80035ca:	bf00      	nop
 80035cc:	080046db 	.word	0x080046db

080035d0 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80035d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80035d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035d6:	f7fd fd18 	bl	800100a <HAL_PCD_EP_Receive>
 80035da:	2803      	cmp	r0, #3
 80035dc:	bf9a      	itte	ls
 80035de:	4b02      	ldrls	r3, [pc, #8]	; (80035e8 <USBD_LL_PrepareReceive+0x18>)
 80035e0:	5c18      	ldrbls	r0, [r3, r0]
 80035e2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80035e4:	bd08      	pop	{r3, pc}
 80035e6:	bf00      	nop
 80035e8:	080046db 	.word	0x080046db

080035ec <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80035ec:	2312      	movs	r3, #18
 80035ee:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80035f0:	4800      	ldr	r0, [pc, #0]	; (80035f4 <USBD_FS_DeviceDescriptor+0x8>)
 80035f2:	4770      	bx	lr
 80035f4:	20000108 	.word	0x20000108

080035f8 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80035f8:	2304      	movs	r3, #4
 80035fa:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80035fc:	4800      	ldr	r0, [pc, #0]	; (8003600 <USBD_FS_LangIDStrDescriptor+0x8>)
 80035fe:	4770      	bx	lr
 8003600:	2000011c 	.word	0x2000011c

08003604 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003604:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003606:	4c04      	ldr	r4, [pc, #16]	; (8003618 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800360a:	460a      	mov	r2, r1
 800360c:	4621      	mov	r1, r4
 800360e:	f7ff fb59 	bl	8002cc4 <USBD_GetString>
  return USBD_StrDesc;
}
 8003612:	4620      	mov	r0, r4
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	200009e8 	.word	0x200009e8
 800361c:	08004715 	.word	0x08004715

08003620 <USBD_FS_ProductStrDescriptor>:
{
 8003620:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003622:	4c04      	ldr	r4, [pc, #16]	; (8003634 <USBD_FS_ProductStrDescriptor+0x14>)
 8003624:	4804      	ldr	r0, [pc, #16]	; (8003638 <USBD_FS_ProductStrDescriptor+0x18>)
 8003626:	460a      	mov	r2, r1
 8003628:	4621      	mov	r1, r4
 800362a:	f7ff fb4b 	bl	8002cc4 <USBD_GetString>
}
 800362e:	4620      	mov	r0, r4
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	200009e8 	.word	0x200009e8
 8003638:	08004721 	.word	0x08004721

0800363c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800363c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800363e:	4c04      	ldr	r4, [pc, #16]	; (8003650 <USBD_FS_SerialStrDescriptor+0x14>)
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <USBD_FS_SerialStrDescriptor+0x18>)
 8003642:	460a      	mov	r2, r1
 8003644:	4621      	mov	r1, r4
 8003646:	f7ff fb3d 	bl	8002cc4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 800364a:	4620      	mov	r0, r4
 800364c:	bd10      	pop	{r4, pc}
 800364e:	bf00      	nop
 8003650:	200009e8 	.word	0x200009e8
 8003654:	0800472e 	.word	0x0800472e

08003658 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003658:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800365a:	4c04      	ldr	r4, [pc, #16]	; (800366c <USBD_FS_ConfigStrDescriptor+0x14>)
 800365c:	4804      	ldr	r0, [pc, #16]	; (8003670 <USBD_FS_ConfigStrDescriptor+0x18>)
 800365e:	460a      	mov	r2, r1
 8003660:	4621      	mov	r1, r4
 8003662:	f7ff fb2f 	bl	8002cc4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003666:	4620      	mov	r0, r4
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	200009e8 	.word	0x200009e8
 8003670:	080046f2 	.word	0x080046f2

08003674 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003674:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003676:	4c04      	ldr	r4, [pc, #16]	; (8003688 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003678:	4804      	ldr	r0, [pc, #16]	; (800368c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800367a:	460a      	mov	r2, r1
 800367c:	4621      	mov	r1, r4
 800367e:	f7ff fb21 	bl	8002cc4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003682:	4620      	mov	r0, r4
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	200009e8 	.word	0x200009e8
 800368c:	08004702 	.word	0x08004702

08003690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003696:	e003      	b.n	80036a0 <LoopCopyDataInit>

08003698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800369a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800369c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800369e:	3104      	adds	r1, #4

080036a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036a0:	480b      	ldr	r0, [pc, #44]	; (80036d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036a8:	d3f6      	bcc.n	8003698 <CopyDataInit>
  ldr  r2, =_sbss
 80036aa:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036ac:	e002      	b.n	80036b4 <LoopFillZerobss>

080036ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036b0:	f842 3b04 	str.w	r3, [r2], #4

080036b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036b8:	d3f9      	bcc.n	80036ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ba:	f7ff fd61 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036be:	f000 f811 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c2:	f7ff fccd 	bl	8003060 <main>
  bx  lr    
 80036c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036cc:	080047e4 	.word	0x080047e4
  ldr  r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036d4:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 80036d8:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 80036dc:	20000bec 	.word	0x20000bec

080036e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e0:	e7fe      	b.n	80036e0 <ADC_IRQHandler>
	...

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0d      	ldr	r6, [pc, #52]	; (800371c <__libc_init_array+0x38>)
 80036e8:	4c0d      	ldr	r4, [pc, #52]	; (8003720 <__libc_init_array+0x3c>)
 80036ea:	1ba4      	subs	r4, r4, r6
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2500      	movs	r5, #0
 80036f0:	42a5      	cmp	r5, r4
 80036f2:	d109      	bne.n	8003708 <__libc_init_array+0x24>
 80036f4:	4e0b      	ldr	r6, [pc, #44]	; (8003724 <__libc_init_array+0x40>)
 80036f6:	4c0c      	ldr	r4, [pc, #48]	; (8003728 <__libc_init_array+0x44>)
 80036f8:	f000 ffb0 	bl	800465c <_init>
 80036fc:	1ba4      	subs	r4, r4, r6
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	2500      	movs	r5, #0
 8003702:	42a5      	cmp	r5, r4
 8003704:	d105      	bne.n	8003712 <__libc_init_array+0x2e>
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800370c:	4798      	blx	r3
 800370e:	3501      	adds	r5, #1
 8003710:	e7ee      	b.n	80036f0 <__libc_init_array+0xc>
 8003712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003716:	4798      	blx	r3
 8003718:	3501      	adds	r5, #1
 800371a:	e7f2      	b.n	8003702 <__libc_init_array+0x1e>
 800371c:	080047dc 	.word	0x080047dc
 8003720:	080047dc 	.word	0x080047dc
 8003724:	080047dc 	.word	0x080047dc
 8003728:	080047e0 	.word	0x080047e0

0800372c <malloc>:
 800372c:	4b02      	ldr	r3, [pc, #8]	; (8003738 <malloc+0xc>)
 800372e:	4601      	mov	r1, r0
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	f000 b859 	b.w	80037e8 <_malloc_r>
 8003736:	bf00      	nop
 8003738:	20000120 	.word	0x20000120

0800373c <free>:
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <free+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f000 b803 	b.w	800374c <_free_r>
 8003746:	bf00      	nop
 8003748:	20000120 	.word	0x20000120

0800374c <_free_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4605      	mov	r5, r0
 8003750:	2900      	cmp	r1, #0
 8003752:	d045      	beq.n	80037e0 <_free_r+0x94>
 8003754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003758:	1f0c      	subs	r4, r1, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	18e4      	addlt	r4, r4, r3
 8003760:	f000 f9ae 	bl	8003ac0 <__malloc_lock>
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <_free_r+0x98>)
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	4610      	mov	r0, r2
 800376a:	b933      	cbnz	r3, 800377a <_free_r+0x2e>
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	6014      	str	r4, [r2, #0]
 8003770:	4628      	mov	r0, r5
 8003772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003776:	f000 b9a4 	b.w	8003ac2 <__malloc_unlock>
 800377a:	42a3      	cmp	r3, r4
 800377c:	d90c      	bls.n	8003798 <_free_r+0x4c>
 800377e:	6821      	ldr	r1, [r4, #0]
 8003780:	1862      	adds	r2, r4, r1
 8003782:	4293      	cmp	r3, r2
 8003784:	bf04      	itt	eq
 8003786:	681a      	ldreq	r2, [r3, #0]
 8003788:	685b      	ldreq	r3, [r3, #4]
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	bf04      	itt	eq
 800378e:	1852      	addeq	r2, r2, r1
 8003790:	6022      	streq	r2, [r4, #0]
 8003792:	6004      	str	r4, [r0, #0]
 8003794:	e7ec      	b.n	8003770 <_free_r+0x24>
 8003796:	4613      	mov	r3, r2
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	b10a      	cbz	r2, 80037a0 <_free_r+0x54>
 800379c:	42a2      	cmp	r2, r4
 800379e:	d9fa      	bls.n	8003796 <_free_r+0x4a>
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	1858      	adds	r0, r3, r1
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d10b      	bne.n	80037c0 <_free_r+0x74>
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	4401      	add	r1, r0
 80037ac:	1858      	adds	r0, r3, r1
 80037ae:	4282      	cmp	r2, r0
 80037b0:	6019      	str	r1, [r3, #0]
 80037b2:	d1dd      	bne.n	8003770 <_free_r+0x24>
 80037b4:	6810      	ldr	r0, [r2, #0]
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	4401      	add	r1, r0
 80037bc:	6019      	str	r1, [r3, #0]
 80037be:	e7d7      	b.n	8003770 <_free_r+0x24>
 80037c0:	d902      	bls.n	80037c8 <_free_r+0x7c>
 80037c2:	230c      	movs	r3, #12
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	e7d3      	b.n	8003770 <_free_r+0x24>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	1821      	adds	r1, r4, r0
 80037cc:	428a      	cmp	r2, r1
 80037ce:	bf04      	itt	eq
 80037d0:	6811      	ldreq	r1, [r2, #0]
 80037d2:	6852      	ldreq	r2, [r2, #4]
 80037d4:	6062      	str	r2, [r4, #4]
 80037d6:	bf04      	itt	eq
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	605c      	str	r4, [r3, #4]
 80037de:	e7c7      	b.n	8003770 <_free_r+0x24>
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	20000348 	.word	0x20000348

080037e8 <_malloc_r>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	1ccd      	adds	r5, r1, #3
 80037ec:	f025 0503 	bic.w	r5, r5, #3
 80037f0:	3508      	adds	r5, #8
 80037f2:	2d0c      	cmp	r5, #12
 80037f4:	bf38      	it	cc
 80037f6:	250c      	movcc	r5, #12
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	4606      	mov	r6, r0
 80037fc:	db01      	blt.n	8003802 <_malloc_r+0x1a>
 80037fe:	42a9      	cmp	r1, r5
 8003800:	d903      	bls.n	800380a <_malloc_r+0x22>
 8003802:	230c      	movs	r3, #12
 8003804:	6033      	str	r3, [r6, #0]
 8003806:	2000      	movs	r0, #0
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	f000 f959 	bl	8003ac0 <__malloc_lock>
 800380e:	4a23      	ldr	r2, [pc, #140]	; (800389c <_malloc_r+0xb4>)
 8003810:	6814      	ldr	r4, [r2, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	b991      	cbnz	r1, 800383c <_malloc_r+0x54>
 8003816:	4c22      	ldr	r4, [pc, #136]	; (80038a0 <_malloc_r+0xb8>)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	b91b      	cbnz	r3, 8003824 <_malloc_r+0x3c>
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f86d 	bl	80038fc <_sbrk_r>
 8003822:	6020      	str	r0, [r4, #0]
 8003824:	4629      	mov	r1, r5
 8003826:	4630      	mov	r0, r6
 8003828:	f000 f868 	bl	80038fc <_sbrk_r>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d126      	bne.n	800387e <_malloc_r+0x96>
 8003830:	230c      	movs	r3, #12
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	4630      	mov	r0, r6
 8003836:	f000 f944 	bl	8003ac2 <__malloc_unlock>
 800383a:	e7e4      	b.n	8003806 <_malloc_r+0x1e>
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	1b5b      	subs	r3, r3, r5
 8003840:	d41a      	bmi.n	8003878 <_malloc_r+0x90>
 8003842:	2b0b      	cmp	r3, #11
 8003844:	d90f      	bls.n	8003866 <_malloc_r+0x7e>
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	50cd      	str	r5, [r1, r3]
 800384a:	18cc      	adds	r4, r1, r3
 800384c:	4630      	mov	r0, r6
 800384e:	f000 f938 	bl	8003ac2 <__malloc_unlock>
 8003852:	f104 000b 	add.w	r0, r4, #11
 8003856:	1d23      	adds	r3, r4, #4
 8003858:	f020 0007 	bic.w	r0, r0, #7
 800385c:	1ac3      	subs	r3, r0, r3
 800385e:	d01b      	beq.n	8003898 <_malloc_r+0xb0>
 8003860:	425a      	negs	r2, r3
 8003862:	50e2      	str	r2, [r4, r3]
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	428c      	cmp	r4, r1
 8003868:	bf0d      	iteet	eq
 800386a:	6863      	ldreq	r3, [r4, #4]
 800386c:	684b      	ldrne	r3, [r1, #4]
 800386e:	6063      	strne	r3, [r4, #4]
 8003870:	6013      	streq	r3, [r2, #0]
 8003872:	bf18      	it	ne
 8003874:	460c      	movne	r4, r1
 8003876:	e7e9      	b.n	800384c <_malloc_r+0x64>
 8003878:	460c      	mov	r4, r1
 800387a:	6849      	ldr	r1, [r1, #4]
 800387c:	e7ca      	b.n	8003814 <_malloc_r+0x2c>
 800387e:	1cc4      	adds	r4, r0, #3
 8003880:	f024 0403 	bic.w	r4, r4, #3
 8003884:	42a0      	cmp	r0, r4
 8003886:	d005      	beq.n	8003894 <_malloc_r+0xac>
 8003888:	1a21      	subs	r1, r4, r0
 800388a:	4630      	mov	r0, r6
 800388c:	f000 f836 	bl	80038fc <_sbrk_r>
 8003890:	3001      	adds	r0, #1
 8003892:	d0cd      	beq.n	8003830 <_malloc_r+0x48>
 8003894:	6025      	str	r5, [r4, #0]
 8003896:	e7d9      	b.n	800384c <_malloc_r+0x64>
 8003898:	bd70      	pop	{r4, r5, r6, pc}
 800389a:	bf00      	nop
 800389c:	20000348 	.word	0x20000348
 80038a0:	2000034c 	.word	0x2000034c

080038a4 <iprintf>:
 80038a4:	b40f      	push	{r0, r1, r2, r3}
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <iprintf+0x2c>)
 80038a8:	b513      	push	{r0, r1, r4, lr}
 80038aa:	681c      	ldr	r4, [r3, #0]
 80038ac:	b124      	cbz	r4, 80038b8 <iprintf+0x14>
 80038ae:	69a3      	ldr	r3, [r4, #24]
 80038b0:	b913      	cbnz	r3, 80038b8 <iprintf+0x14>
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 f872 	bl	800399c <__sinit>
 80038b8:	ab05      	add	r3, sp, #20
 80038ba:	9a04      	ldr	r2, [sp, #16]
 80038bc:	68a1      	ldr	r1, [r4, #8]
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 f929 	bl	8003b18 <_vfiprintf_r>
 80038c6:	b002      	add	sp, #8
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	b004      	add	sp, #16
 80038ce:	4770      	bx	lr
 80038d0:	20000120 	.word	0x20000120

080038d4 <putchar>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <putchar+0x24>)
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	4605      	mov	r5, r0
 80038dc:	b124      	cbz	r4, 80038e8 <putchar+0x14>
 80038de:	69a3      	ldr	r3, [r4, #24]
 80038e0:	b913      	cbnz	r3, 80038e8 <putchar+0x14>
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 f85a 	bl	800399c <__sinit>
 80038e8:	68a2      	ldr	r2, [r4, #8]
 80038ea:	4629      	mov	r1, r5
 80038ec:	4620      	mov	r0, r4
 80038ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f2:	f000 bbbd 	b.w	8004070 <_putc_r>
 80038f6:	bf00      	nop
 80038f8:	20000120 	.word	0x20000120

080038fc <_sbrk_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4c06      	ldr	r4, [pc, #24]	; (8003918 <_sbrk_r+0x1c>)
 8003900:	2300      	movs	r3, #0
 8003902:	4605      	mov	r5, r0
 8003904:	4608      	mov	r0, r1
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f000 fe92 	bl	8004630 <_sbrk>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_sbrk_r+0x1a>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	b103      	cbz	r3, 8003916 <_sbrk_r+0x1a>
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	20000be8 	.word	0x20000be8

0800391c <_cleanup_r>:
 800391c:	4901      	ldr	r1, [pc, #4]	; (8003924 <_cleanup_r+0x8>)
 800391e:	f000 b8a9 	b.w	8003a74 <_fwalk_reent>
 8003922:	bf00      	nop
 8003924:	08004439 	.word	0x08004439

08003928 <std.isra.0>:
 8003928:	2300      	movs	r3, #0
 800392a:	b510      	push	{r4, lr}
 800392c:	4604      	mov	r4, r0
 800392e:	6003      	str	r3, [r0, #0]
 8003930:	6043      	str	r3, [r0, #4]
 8003932:	6083      	str	r3, [r0, #8]
 8003934:	8181      	strh	r1, [r0, #12]
 8003936:	6643      	str	r3, [r0, #100]	; 0x64
 8003938:	81c2      	strh	r2, [r0, #14]
 800393a:	6103      	str	r3, [r0, #16]
 800393c:	6143      	str	r3, [r0, #20]
 800393e:	6183      	str	r3, [r0, #24]
 8003940:	4619      	mov	r1, r3
 8003942:	2208      	movs	r2, #8
 8003944:	305c      	adds	r0, #92	; 0x5c
 8003946:	f000 f8b3 	bl	8003ab0 <memset>
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <std.isra.0+0x38>)
 800394c:	6263      	str	r3, [r4, #36]	; 0x24
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <std.isra.0+0x3c>)
 8003950:	62a3      	str	r3, [r4, #40]	; 0x28
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <std.isra.0+0x40>)
 8003954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <std.isra.0+0x44>)
 8003958:	6224      	str	r4, [r4, #32]
 800395a:	6323      	str	r3, [r4, #48]	; 0x30
 800395c:	bd10      	pop	{r4, pc}
 800395e:	bf00      	nop
 8003960:	080040dd 	.word	0x080040dd
 8003964:	080040ff 	.word	0x080040ff
 8003968:	08004137 	.word	0x08004137
 800396c:	0800415b 	.word	0x0800415b

08003970 <__sfmoreglue>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	1e4a      	subs	r2, r1, #1
 8003974:	2568      	movs	r5, #104	; 0x68
 8003976:	4355      	muls	r5, r2
 8003978:	460e      	mov	r6, r1
 800397a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800397e:	f7ff ff33 	bl	80037e8 <_malloc_r>
 8003982:	4604      	mov	r4, r0
 8003984:	b140      	cbz	r0, 8003998 <__sfmoreglue+0x28>
 8003986:	2100      	movs	r1, #0
 8003988:	e880 0042 	stmia.w	r0, {r1, r6}
 800398c:	300c      	adds	r0, #12
 800398e:	60a0      	str	r0, [r4, #8]
 8003990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003994:	f000 f88c 	bl	8003ab0 <memset>
 8003998:	4620      	mov	r0, r4
 800399a:	bd70      	pop	{r4, r5, r6, pc}

0800399c <__sinit>:
 800399c:	6983      	ldr	r3, [r0, #24]
 800399e:	b510      	push	{r4, lr}
 80039a0:	4604      	mov	r4, r0
 80039a2:	bb33      	cbnz	r3, 80039f2 <__sinit+0x56>
 80039a4:	6483      	str	r3, [r0, #72]	; 0x48
 80039a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80039a8:	6503      	str	r3, [r0, #80]	; 0x50
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <__sinit+0x58>)
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <__sinit+0x5c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6282      	str	r2, [r0, #40]	; 0x28
 80039b2:	4298      	cmp	r0, r3
 80039b4:	bf04      	itt	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	6183      	streq	r3, [r0, #24]
 80039ba:	f000 f81f 	bl	80039fc <__sfp>
 80039be:	6060      	str	r0, [r4, #4]
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 f81b 	bl	80039fc <__sfp>
 80039c6:	60a0      	str	r0, [r4, #8]
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 f817 	bl	80039fc <__sfp>
 80039ce:	2200      	movs	r2, #0
 80039d0:	60e0      	str	r0, [r4, #12]
 80039d2:	2104      	movs	r1, #4
 80039d4:	6860      	ldr	r0, [r4, #4]
 80039d6:	f7ff ffa7 	bl	8003928 <std.isra.0>
 80039da:	2201      	movs	r2, #1
 80039dc:	2109      	movs	r1, #9
 80039de:	68a0      	ldr	r0, [r4, #8]
 80039e0:	f7ff ffa2 	bl	8003928 <std.isra.0>
 80039e4:	2202      	movs	r2, #2
 80039e6:	2112      	movs	r1, #18
 80039e8:	68e0      	ldr	r0, [r4, #12]
 80039ea:	f7ff ff9d 	bl	8003928 <std.isra.0>
 80039ee:	2301      	movs	r3, #1
 80039f0:	61a3      	str	r3, [r4, #24]
 80039f2:	bd10      	pop	{r4, pc}
 80039f4:	0800479c 	.word	0x0800479c
 80039f8:	0800391d 	.word	0x0800391d

080039fc <__sfp>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <__sfp+0x74>)
 8003a00:	681e      	ldr	r6, [r3, #0]
 8003a02:	69b3      	ldr	r3, [r6, #24]
 8003a04:	4607      	mov	r7, r0
 8003a06:	b913      	cbnz	r3, 8003a0e <__sfp+0x12>
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7ff ffc7 	bl	800399c <__sinit>
 8003a0e:	3648      	adds	r6, #72	; 0x48
 8003a10:	68b4      	ldr	r4, [r6, #8]
 8003a12:	6873      	ldr	r3, [r6, #4]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	d503      	bpl.n	8003a20 <__sfp+0x24>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	b133      	cbz	r3, 8003a2a <__sfp+0x2e>
 8003a1c:	6836      	ldr	r6, [r6, #0]
 8003a1e:	e7f7      	b.n	8003a10 <__sfp+0x14>
 8003a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a24:	b16d      	cbz	r5, 8003a42 <__sfp+0x46>
 8003a26:	3468      	adds	r4, #104	; 0x68
 8003a28:	e7f4      	b.n	8003a14 <__sfp+0x18>
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f7ff ff9f 	bl	8003970 <__sfmoreglue>
 8003a32:	6030      	str	r0, [r6, #0]
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d1f1      	bne.n	8003a1c <__sfp+0x20>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4620      	mov	r0, r4
 8003a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a46:	81e3      	strh	r3, [r4, #14]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	6665      	str	r5, [r4, #100]	; 0x64
 8003a4e:	6025      	str	r5, [r4, #0]
 8003a50:	60a5      	str	r5, [r4, #8]
 8003a52:	6065      	str	r5, [r4, #4]
 8003a54:	6125      	str	r5, [r4, #16]
 8003a56:	6165      	str	r5, [r4, #20]
 8003a58:	61a5      	str	r5, [r4, #24]
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a62:	f000 f825 	bl	8003ab0 <memset>
 8003a66:	6365      	str	r5, [r4, #52]	; 0x34
 8003a68:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a6e:	e7e6      	b.n	8003a3e <__sfp+0x42>
 8003a70:	0800479c 	.word	0x0800479c

08003a74 <_fwalk_reent>:
 8003a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a78:	4680      	mov	r8, r0
 8003a7a:	4689      	mov	r9, r1
 8003a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a80:	2600      	movs	r6, #0
 8003a82:	b914      	cbnz	r4, 8003a8a <_fwalk_reent+0x16>
 8003a84:	4630      	mov	r0, r6
 8003a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8a:	68a5      	ldr	r5, [r4, #8]
 8003a8c:	6867      	ldr	r7, [r4, #4]
 8003a8e:	3f01      	subs	r7, #1
 8003a90:	d501      	bpl.n	8003a96 <_fwalk_reent+0x22>
 8003a92:	6824      	ldr	r4, [r4, #0]
 8003a94:	e7f5      	b.n	8003a82 <_fwalk_reent+0xe>
 8003a96:	89ab      	ldrh	r3, [r5, #12]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d907      	bls.n	8003aac <_fwalk_reent+0x38>
 8003a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d003      	beq.n	8003aac <_fwalk_reent+0x38>
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	47c8      	blx	r9
 8003aaa:	4306      	orrs	r6, r0
 8003aac:	3568      	adds	r5, #104	; 0x68
 8003aae:	e7ee      	b.n	8003a8e <_fwalk_reent+0x1a>

08003ab0 <memset>:
 8003ab0:	4402      	add	r2, r0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	f803 1b01 	strb.w	r1, [r3], #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <__malloc_lock>:
 8003ac0:	4770      	bx	lr

08003ac2 <__malloc_unlock>:
 8003ac2:	4770      	bx	lr

08003ac4 <__sfputc_r>:
 8003ac4:	6893      	ldr	r3, [r2, #8]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	b410      	push	{r4}
 8003acc:	6093      	str	r3, [r2, #8]
 8003ace:	da09      	bge.n	8003ae4 <__sfputc_r+0x20>
 8003ad0:	6994      	ldr	r4, [r2, #24]
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	db02      	blt.n	8003adc <__sfputc_r+0x18>
 8003ad6:	b2cb      	uxtb	r3, r1
 8003ad8:	2b0a      	cmp	r3, #10
 8003ada:	d103      	bne.n	8003ae4 <__sfputc_r+0x20>
 8003adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae0:	f000 bb40 	b.w	8004164 <__swbuf_r>
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	1c58      	adds	r0, r3, #1
 8003ae8:	6010      	str	r0, [r2, #0]
 8003aea:	7019      	strb	r1, [r3, #0]
 8003aec:	b2c8      	uxtb	r0, r1
 8003aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <__sfputs_r>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	4606      	mov	r6, r0
 8003af8:	460f      	mov	r7, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	18d5      	adds	r5, r2, r3
 8003afe:	42ac      	cmp	r4, r5
 8003b00:	d101      	bne.n	8003b06 <__sfputs_r+0x12>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e007      	b.n	8003b16 <__sfputs_r+0x22>
 8003b06:	463a      	mov	r2, r7
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7ff ffd9 	bl	8003ac4 <__sfputc_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d1f3      	bne.n	8003afe <__sfputs_r+0xa>
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b18 <_vfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	b09d      	sub	sp, #116	; 0x74
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4617      	mov	r7, r2
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	4606      	mov	r6, r0
 8003b26:	b118      	cbz	r0, 8003b30 <_vfiprintf_r+0x18>
 8003b28:	6983      	ldr	r3, [r0, #24]
 8003b2a:	b90b      	cbnz	r3, 8003b30 <_vfiprintf_r+0x18>
 8003b2c:	f7ff ff36 	bl	800399c <__sinit>
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <_vfiprintf_r+0x20c>)
 8003b32:	429c      	cmp	r4, r3
 8003b34:	d157      	bne.n	8003be6 <_vfiprintf_r+0xce>
 8003b36:	6874      	ldr	r4, [r6, #4]
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	0718      	lsls	r0, r3, #28
 8003b3c:	d55d      	bpl.n	8003bfa <_vfiprintf_r+0xe2>
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05a      	beq.n	8003bfa <_vfiprintf_r+0xe2>
 8003b44:	2300      	movs	r3, #0
 8003b46:	9309      	str	r3, [sp, #36]	; 0x24
 8003b48:	2320      	movs	r3, #32
 8003b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4e:	2330      	movs	r3, #48	; 0x30
 8003b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b54:	f04f 0b01 	mov.w	fp, #1
 8003b58:	46b8      	mov	r8, r7
 8003b5a:	4645      	mov	r5, r8
 8003b5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d155      	bne.n	8003c10 <_vfiprintf_r+0xf8>
 8003b64:	ebb8 0a07 	subs.w	sl, r8, r7
 8003b68:	d00b      	beq.n	8003b82 <_vfiprintf_r+0x6a>
 8003b6a:	4653      	mov	r3, sl
 8003b6c:	463a      	mov	r2, r7
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4630      	mov	r0, r6
 8003b72:	f7ff ffbf 	bl	8003af4 <__sfputs_r>
 8003b76:	3001      	adds	r0, #1
 8003b78:	f000 80c4 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7e:	4453      	add	r3, sl
 8003b80:	9309      	str	r3, [sp, #36]	; 0x24
 8003b82:	f898 3000 	ldrb.w	r3, [r8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80bc 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	9307      	str	r3, [sp, #28]
 8003b96:	9205      	str	r2, [sp, #20]
 8003b98:	9306      	str	r3, [sp, #24]
 8003b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	7829      	ldrb	r1, [r5, #0]
 8003ba4:	4860      	ldr	r0, [pc, #384]	; (8003d28 <_vfiprintf_r+0x210>)
 8003ba6:	f7fc fb13 	bl	80001d0 <memchr>
 8003baa:	f105 0801 	add.w	r8, r5, #1
 8003bae:	9b04      	ldr	r3, [sp, #16]
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d131      	bne.n	8003c18 <_vfiprintf_r+0x100>
 8003bb4:	06d9      	lsls	r1, r3, #27
 8003bb6:	bf44      	itt	mi
 8003bb8:	2220      	movmi	r2, #32
 8003bba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bbe:	071a      	lsls	r2, r3, #28
 8003bc0:	bf44      	itt	mi
 8003bc2:	222b      	movmi	r2, #43	; 0x2b
 8003bc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bc8:	782a      	ldrb	r2, [r5, #0]
 8003bca:	2a2a      	cmp	r2, #42	; 0x2a
 8003bcc:	d02c      	beq.n	8003c28 <_vfiprintf_r+0x110>
 8003bce:	9a07      	ldr	r2, [sp, #28]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	46a8      	mov	r8, r5
 8003bd6:	3501      	adds	r5, #1
 8003bd8:	f898 3000 	ldrb.w	r3, [r8]
 8003bdc:	3b30      	subs	r3, #48	; 0x30
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	d96d      	bls.n	8003cbe <_vfiprintf_r+0x1a6>
 8003be2:	b371      	cbz	r1, 8003c42 <_vfiprintf_r+0x12a>
 8003be4:	e026      	b.n	8003c34 <_vfiprintf_r+0x11c>
 8003be6:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <_vfiprintf_r+0x214>)
 8003be8:	429c      	cmp	r4, r3
 8003bea:	d101      	bne.n	8003bf0 <_vfiprintf_r+0xd8>
 8003bec:	68b4      	ldr	r4, [r6, #8]
 8003bee:	e7a3      	b.n	8003b38 <_vfiprintf_r+0x20>
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <_vfiprintf_r+0x218>)
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	bf08      	it	eq
 8003bf6:	68f4      	ldreq	r4, [r6, #12]
 8003bf8:	e79e      	b.n	8003b38 <_vfiprintf_r+0x20>
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 fb15 	bl	800422c <__swsetup_r>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d09e      	beq.n	8003b44 <_vfiprintf_r+0x2c>
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	b01d      	add	sp, #116	; 0x74
 8003c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c10:	2b25      	cmp	r3, #37	; 0x25
 8003c12:	d0a7      	beq.n	8003b64 <_vfiprintf_r+0x4c>
 8003c14:	46a8      	mov	r8, r5
 8003c16:	e7a0      	b.n	8003b5a <_vfiprintf_r+0x42>
 8003c18:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <_vfiprintf_r+0x210>)
 8003c1a:	1a80      	subs	r0, r0, r2
 8003c1c:	fa0b f000 	lsl.w	r0, fp, r0
 8003c20:	4318      	orrs	r0, r3
 8003c22:	9004      	str	r0, [sp, #16]
 8003c24:	4645      	mov	r5, r8
 8003c26:	e7bb      	b.n	8003ba0 <_vfiprintf_r+0x88>
 8003c28:	9a03      	ldr	r2, [sp, #12]
 8003c2a:	1d11      	adds	r1, r2, #4
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	9103      	str	r1, [sp, #12]
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	db01      	blt.n	8003c38 <_vfiprintf_r+0x120>
 8003c34:	9207      	str	r2, [sp, #28]
 8003c36:	e004      	b.n	8003c42 <_vfiprintf_r+0x12a>
 8003c38:	4252      	negs	r2, r2
 8003c3a:	f043 0302 	orr.w	r3, r3, #2
 8003c3e:	9207      	str	r2, [sp, #28]
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	f898 3000 	ldrb.w	r3, [r8]
 8003c46:	2b2e      	cmp	r3, #46	; 0x2e
 8003c48:	d110      	bne.n	8003c6c <_vfiprintf_r+0x154>
 8003c4a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c50:	f108 0101 	add.w	r1, r8, #1
 8003c54:	d137      	bne.n	8003cc6 <_vfiprintf_r+0x1ae>
 8003c56:	9b03      	ldr	r3, [sp, #12]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	9203      	str	r2, [sp, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bfb8      	it	lt
 8003c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c66:	f108 0802 	add.w	r8, r8, #2
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	4d31      	ldr	r5, [pc, #196]	; (8003d34 <_vfiprintf_r+0x21c>)
 8003c6e:	f898 1000 	ldrb.w	r1, [r8]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4628      	mov	r0, r5
 8003c76:	f7fc faab 	bl	80001d0 <memchr>
 8003c7a:	b140      	cbz	r0, 8003c8e <_vfiprintf_r+0x176>
 8003c7c:	2340      	movs	r3, #64	; 0x40
 8003c7e:	1b40      	subs	r0, r0, r5
 8003c80:	fa03 f000 	lsl.w	r0, r3, r0
 8003c84:	9b04      	ldr	r3, [sp, #16]
 8003c86:	4303      	orrs	r3, r0
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	f108 0801 	add.w	r8, r8, #1
 8003c8e:	f898 1000 	ldrb.w	r1, [r8]
 8003c92:	4829      	ldr	r0, [pc, #164]	; (8003d38 <_vfiprintf_r+0x220>)
 8003c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c98:	2206      	movs	r2, #6
 8003c9a:	f108 0701 	add.w	r7, r8, #1
 8003c9e:	f7fc fa97 	bl	80001d0 <memchr>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d034      	beq.n	8003d10 <_vfiprintf_r+0x1f8>
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <_vfiprintf_r+0x224>)
 8003ca8:	bb03      	cbnz	r3, 8003cec <_vfiprintf_r+0x1d4>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	3307      	adds	r3, #7
 8003cae:	f023 0307 	bic.w	r3, r3, #7
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	9303      	str	r3, [sp, #12]
 8003cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb8:	444b      	add	r3, r9
 8003cba:	9309      	str	r3, [sp, #36]	; 0x24
 8003cbc:	e74c      	b.n	8003b58 <_vfiprintf_r+0x40>
 8003cbe:	fb00 3202 	mla	r2, r0, r2, r3
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	e786      	b.n	8003bd4 <_vfiprintf_r+0xbc>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	250a      	movs	r5, #10
 8003cce:	4688      	mov	r8, r1
 8003cd0:	3101      	adds	r1, #1
 8003cd2:	f898 2000 	ldrb.w	r2, [r8]
 8003cd6:	3a30      	subs	r2, #48	; 0x30
 8003cd8:	2a09      	cmp	r2, #9
 8003cda:	d903      	bls.n	8003ce4 <_vfiprintf_r+0x1cc>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0c5      	beq.n	8003c6c <_vfiprintf_r+0x154>
 8003ce0:	9005      	str	r0, [sp, #20]
 8003ce2:	e7c3      	b.n	8003c6c <_vfiprintf_r+0x154>
 8003ce4:	fb05 2000 	mla	r0, r5, r0, r2
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e7f0      	b.n	8003cce <_vfiprintf_r+0x1b6>
 8003cec:	ab03      	add	r3, sp, #12
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <_vfiprintf_r+0x228>)
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f3af 8000 	nop.w
 8003cfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d00:	4681      	mov	r9, r0
 8003d02:	d1d8      	bne.n	8003cb6 <_vfiprintf_r+0x19e>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	065b      	lsls	r3, r3, #25
 8003d08:	f53f af7d 	bmi.w	8003c06 <_vfiprintf_r+0xee>
 8003d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d0e:	e77c      	b.n	8003c0a <_vfiprintf_r+0xf2>
 8003d10:	ab03      	add	r3, sp, #12
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4622      	mov	r2, r4
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <_vfiprintf_r+0x228>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f888 	bl	8003e30 <_printf_i>
 8003d20:	e7ec      	b.n	8003cfc <_vfiprintf_r+0x1e4>
 8003d22:	bf00      	nop
 8003d24:	0800475c 	.word	0x0800475c
 8003d28:	080047a0 	.word	0x080047a0
 8003d2c:	0800477c 	.word	0x0800477c
 8003d30:	0800473c 	.word	0x0800473c
 8003d34:	080047a6 	.word	0x080047a6
 8003d38:	080047aa 	.word	0x080047aa
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	08003af5 	.word	0x08003af5

08003d44 <_printf_common>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	4691      	mov	r9, r2
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	688a      	ldr	r2, [r1, #8]
 8003d4e:	690b      	ldr	r3, [r1, #16]
 8003d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	bfb8      	it	lt
 8003d58:	4613      	movlt	r3, r2
 8003d5a:	f8c9 3000 	str.w	r3, [r9]
 8003d5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d62:	4606      	mov	r6, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	b112      	cbz	r2, 8003d6e <_printf_common+0x2a>
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f8c9 3000 	str.w	r3, [r9]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	bf42      	ittt	mi
 8003d74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d78:	3302      	addmi	r3, #2
 8003d7a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d107      	bne.n	8003d96 <_printf_common+0x52>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	429d      	cmp	r5, r3
 8003d94:	db29      	blt.n	8003dea <_printf_common+0xa6>
 8003d96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	3300      	adds	r3, #0
 8003d9e:	bf18      	it	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	0692      	lsls	r2, r2, #26
 8003da4:	d42e      	bmi.n	8003e04 <_printf_common+0xc0>
 8003da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003daa:	4639      	mov	r1, r7
 8003dac:	4630      	mov	r0, r6
 8003dae:	47c0      	blx	r8
 8003db0:	3001      	adds	r0, #1
 8003db2:	d021      	beq.n	8003df8 <_printf_common+0xb4>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	68e5      	ldr	r5, [r4, #12]
 8003db8:	f8d9 2000 	ldr.w	r2, [r9]
 8003dbc:	f003 0306 	and.w	r3, r3, #6
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	bf08      	it	eq
 8003dc4:	1aad      	subeq	r5, r5, r2
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	6922      	ldr	r2, [r4, #16]
 8003dca:	bf0c      	ite	eq
 8003dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd0:	2500      	movne	r5, #0
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	bfc4      	itt	gt
 8003dd6:	1a9b      	subgt	r3, r3, r2
 8003dd8:	18ed      	addgt	r5, r5, r3
 8003dda:	f04f 0900 	mov.w	r9, #0
 8003dde:	341a      	adds	r4, #26
 8003de0:	454d      	cmp	r5, r9
 8003de2:	d11b      	bne.n	8003e1c <_printf_common+0xd8>
 8003de4:	2000      	movs	r0, #0
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dea:	2301      	movs	r3, #1
 8003dec:	4652      	mov	r2, sl
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d103      	bne.n	8003e00 <_printf_common+0xbc>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e00:	3501      	adds	r5, #1
 8003e02:	e7c2      	b.n	8003d8a <_printf_common+0x46>
 8003e04:	18e1      	adds	r1, r4, r3
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	2030      	movs	r0, #48	; 0x30
 8003e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e0e:	4422      	add	r2, r4
 8003e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e18:	3302      	adds	r3, #2
 8003e1a:	e7c4      	b.n	8003da6 <_printf_common+0x62>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4639      	mov	r1, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	47c0      	blx	r8
 8003e26:	3001      	adds	r0, #1
 8003e28:	d0e6      	beq.n	8003df8 <_printf_common+0xb4>
 8003e2a:	f109 0901 	add.w	r9, r9, #1
 8003e2e:	e7d7      	b.n	8003de0 <_printf_common+0x9c>

08003e30 <_printf_i>:
 8003e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e34:	4617      	mov	r7, r2
 8003e36:	7e0a      	ldrb	r2, [r1, #24]
 8003e38:	b085      	sub	sp, #20
 8003e3a:	2a6e      	cmp	r2, #110	; 0x6e
 8003e3c:	4698      	mov	r8, r3
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e44:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003e48:	f000 80bc 	beq.w	8003fc4 <_printf_i+0x194>
 8003e4c:	d81a      	bhi.n	8003e84 <_printf_i+0x54>
 8003e4e:	2a63      	cmp	r2, #99	; 0x63
 8003e50:	d02e      	beq.n	8003eb0 <_printf_i+0x80>
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x3a>
 8003e54:	2a00      	cmp	r2, #0
 8003e56:	f000 80c8 	beq.w	8003fea <_printf_i+0x1ba>
 8003e5a:	2a58      	cmp	r2, #88	; 0x58
 8003e5c:	f000 808a 	beq.w	8003f74 <_printf_i+0x144>
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003e68:	e02a      	b.n	8003ec0 <_printf_i+0x90>
 8003e6a:	2a64      	cmp	r2, #100	; 0x64
 8003e6c:	d001      	beq.n	8003e72 <_printf_i+0x42>
 8003e6e:	2a69      	cmp	r2, #105	; 0x69
 8003e70:	d1f6      	bne.n	8003e60 <_printf_i+0x30>
 8003e72:	6821      	ldr	r1, [r4, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e7a:	d023      	beq.n	8003ec4 <_printf_i+0x94>
 8003e7c:	1d11      	adds	r1, r2, #4
 8003e7e:	6019      	str	r1, [r3, #0]
 8003e80:	6813      	ldr	r3, [r2, #0]
 8003e82:	e027      	b.n	8003ed4 <_printf_i+0xa4>
 8003e84:	2a73      	cmp	r2, #115	; 0x73
 8003e86:	f000 80b4 	beq.w	8003ff2 <_printf_i+0x1c2>
 8003e8a:	d808      	bhi.n	8003e9e <_printf_i+0x6e>
 8003e8c:	2a6f      	cmp	r2, #111	; 0x6f
 8003e8e:	d02a      	beq.n	8003ee6 <_printf_i+0xb6>
 8003e90:	2a70      	cmp	r2, #112	; 0x70
 8003e92:	d1e5      	bne.n	8003e60 <_printf_i+0x30>
 8003e94:	680a      	ldr	r2, [r1, #0]
 8003e96:	f042 0220 	orr.w	r2, r2, #32
 8003e9a:	600a      	str	r2, [r1, #0]
 8003e9c:	e003      	b.n	8003ea6 <_printf_i+0x76>
 8003e9e:	2a75      	cmp	r2, #117	; 0x75
 8003ea0:	d021      	beq.n	8003ee6 <_printf_i+0xb6>
 8003ea2:	2a78      	cmp	r2, #120	; 0x78
 8003ea4:	d1dc      	bne.n	8003e60 <_printf_i+0x30>
 8003ea6:	2278      	movs	r2, #120	; 0x78
 8003ea8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003eac:	496e      	ldr	r1, [pc, #440]	; (8004068 <_printf_i+0x238>)
 8003eae:	e064      	b.n	8003f7a <_printf_i+0x14a>
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003eb6:	1d11      	adds	r1, r2, #4
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0a3      	b.n	800400c <_printf_i+0x1dc>
 8003ec4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ec8:	f102 0104 	add.w	r1, r2, #4
 8003ecc:	6019      	str	r1, [r3, #0]
 8003ece:	d0d7      	beq.n	8003e80 <_printf_i+0x50>
 8003ed0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	da03      	bge.n	8003ee0 <_printf_i+0xb0>
 8003ed8:	222d      	movs	r2, #45	; 0x2d
 8003eda:	425b      	negs	r3, r3
 8003edc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ee0:	4962      	ldr	r1, [pc, #392]	; (800406c <_printf_i+0x23c>)
 8003ee2:	220a      	movs	r2, #10
 8003ee4:	e017      	b.n	8003f16 <_printf_i+0xe6>
 8003ee6:	6820      	ldr	r0, [r4, #0]
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003eee:	d003      	beq.n	8003ef8 <_printf_i+0xc8>
 8003ef0:	1d08      	adds	r0, r1, #4
 8003ef2:	6018      	str	r0, [r3, #0]
 8003ef4:	680b      	ldr	r3, [r1, #0]
 8003ef6:	e006      	b.n	8003f06 <_printf_i+0xd6>
 8003ef8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003efc:	f101 0004 	add.w	r0, r1, #4
 8003f00:	6018      	str	r0, [r3, #0]
 8003f02:	d0f7      	beq.n	8003ef4 <_printf_i+0xc4>
 8003f04:	880b      	ldrh	r3, [r1, #0]
 8003f06:	4959      	ldr	r1, [pc, #356]	; (800406c <_printf_i+0x23c>)
 8003f08:	2a6f      	cmp	r2, #111	; 0x6f
 8003f0a:	bf14      	ite	ne
 8003f0c:	220a      	movne	r2, #10
 8003f0e:	2208      	moveq	r2, #8
 8003f10:	2000      	movs	r0, #0
 8003f12:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f16:	6865      	ldr	r5, [r4, #4]
 8003f18:	60a5      	str	r5, [r4, #8]
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	f2c0 809c 	blt.w	8004058 <_printf_i+0x228>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	f020 0004 	bic.w	r0, r0, #4
 8003f26:	6020      	str	r0, [r4, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d13f      	bne.n	8003fac <_printf_i+0x17c>
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	f040 8095 	bne.w	800405c <_printf_i+0x22c>
 8003f32:	4675      	mov	r5, lr
 8003f34:	2a08      	cmp	r2, #8
 8003f36:	d10b      	bne.n	8003f50 <_printf_i+0x120>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	07da      	lsls	r2, r3, #31
 8003f3c:	d508      	bpl.n	8003f50 <_printf_i+0x120>
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	6862      	ldr	r2, [r4, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bfde      	ittt	le
 8003f46:	2330      	movle	r3, #48	; 0x30
 8003f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f50:	ebae 0305 	sub.w	r3, lr, r5
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	f8cd 8000 	str.w	r8, [sp]
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	aa03      	add	r2, sp, #12
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff feef 	bl	8003d44 <_printf_common>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d155      	bne.n	8004016 <_printf_i+0x1e6>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	b005      	add	sp, #20
 8003f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f74:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003f78:	493c      	ldr	r1, [pc, #240]	; (800406c <_printf_i+0x23c>)
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f82:	f100 0504 	add.w	r5, r0, #4
 8003f86:	601d      	str	r5, [r3, #0]
 8003f88:	d001      	beq.n	8003f8e <_printf_i+0x15e>
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	e002      	b.n	8003f94 <_printf_i+0x164>
 8003f8e:	0655      	lsls	r5, r2, #25
 8003f90:	d5fb      	bpl.n	8003f8a <_printf_i+0x15a>
 8003f92:	8803      	ldrh	r3, [r0, #0]
 8003f94:	07d0      	lsls	r0, r2, #31
 8003f96:	bf44      	itt	mi
 8003f98:	f042 0220 	orrmi.w	r2, r2, #32
 8003f9c:	6022      	strmi	r2, [r4, #0]
 8003f9e:	b91b      	cbnz	r3, 8003fa8 <_printf_i+0x178>
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	f022 0220 	bic.w	r2, r2, #32
 8003fa6:	6022      	str	r2, [r4, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	e7b1      	b.n	8003f10 <_printf_i+0xe0>
 8003fac:	4675      	mov	r5, lr
 8003fae:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fb2:	fb02 3310 	mls	r3, r2, r0, r3
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d1f5      	bne.n	8003fae <_printf_i+0x17e>
 8003fc2:	e7b7      	b.n	8003f34 <_printf_i+0x104>
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	6949      	ldr	r1, [r1, #20]
 8003fca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003fce:	d004      	beq.n	8003fda <_printf_i+0x1aa>
 8003fd0:	1d10      	adds	r0, r2, #4
 8003fd2:	6018      	str	r0, [r3, #0]
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	6019      	str	r1, [r3, #0]
 8003fd8:	e007      	b.n	8003fea <_printf_i+0x1ba>
 8003fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fde:	f102 0004 	add.w	r0, r2, #4
 8003fe2:	6018      	str	r0, [r3, #0]
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	d0f6      	beq.n	8003fd6 <_printf_i+0x1a6>
 8003fe8:	8019      	strh	r1, [r3, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	6123      	str	r3, [r4, #16]
 8003fee:	4675      	mov	r5, lr
 8003ff0:	e7b1      	b.n	8003f56 <_printf_i+0x126>
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	1d11      	adds	r1, r2, #4
 8003ff6:	6019      	str	r1, [r3, #0]
 8003ff8:	6815      	ldr	r5, [r2, #0]
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7fc f8e6 	bl	80001d0 <memchr>
 8004004:	b108      	cbz	r0, 800400a <_printf_i+0x1da>
 8004006:	1b40      	subs	r0, r0, r5
 8004008:	6060      	str	r0, [r4, #4]
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	2300      	movs	r3, #0
 8004010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004014:	e79f      	b.n	8003f56 <_printf_i+0x126>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	462a      	mov	r2, r5
 800401a:	4639      	mov	r1, r7
 800401c:	4630      	mov	r0, r6
 800401e:	47c0      	blx	r8
 8004020:	3001      	adds	r0, #1
 8004022:	d0a2      	beq.n	8003f6a <_printf_i+0x13a>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	079b      	lsls	r3, r3, #30
 8004028:	d507      	bpl.n	800403a <_printf_i+0x20a>
 800402a:	2500      	movs	r5, #0
 800402c:	f104 0919 	add.w	r9, r4, #25
 8004030:	68e3      	ldr	r3, [r4, #12]
 8004032:	9a03      	ldr	r2, [sp, #12]
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	429d      	cmp	r5, r3
 8004038:	db05      	blt.n	8004046 <_printf_i+0x216>
 800403a:	68e0      	ldr	r0, [r4, #12]
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	4298      	cmp	r0, r3
 8004040:	bfb8      	it	lt
 8004042:	4618      	movlt	r0, r3
 8004044:	e793      	b.n	8003f6e <_printf_i+0x13e>
 8004046:	2301      	movs	r3, #1
 8004048:	464a      	mov	r2, r9
 800404a:	4639      	mov	r1, r7
 800404c:	4630      	mov	r0, r6
 800404e:	47c0      	blx	r8
 8004050:	3001      	adds	r0, #1
 8004052:	d08a      	beq.n	8003f6a <_printf_i+0x13a>
 8004054:	3501      	adds	r5, #1
 8004056:	e7eb      	b.n	8004030 <_printf_i+0x200>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1a7      	bne.n	8003fac <_printf_i+0x17c>
 800405c:	780b      	ldrb	r3, [r1, #0]
 800405e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004066:	e765      	b.n	8003f34 <_printf_i+0x104>
 8004068:	080047c2 	.word	0x080047c2
 800406c:	080047b1 	.word	0x080047b1

08004070 <_putc_r>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	460d      	mov	r5, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4606      	mov	r6, r0
 8004078:	b118      	cbz	r0, 8004082 <_putc_r+0x12>
 800407a:	6983      	ldr	r3, [r0, #24]
 800407c:	b90b      	cbnz	r3, 8004082 <_putc_r+0x12>
 800407e:	f7ff fc8d 	bl	800399c <__sinit>
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <_putc_r+0x60>)
 8004084:	429c      	cmp	r4, r3
 8004086:	d112      	bne.n	80040ae <_putc_r+0x3e>
 8004088:	6874      	ldr	r4, [r6, #4]
 800408a:	68a3      	ldr	r3, [r4, #8]
 800408c:	3b01      	subs	r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	da16      	bge.n	80040c2 <_putc_r+0x52>
 8004094:	69a2      	ldr	r2, [r4, #24]
 8004096:	4293      	cmp	r3, r2
 8004098:	db02      	blt.n	80040a0 <_putc_r+0x30>
 800409a:	b2eb      	uxtb	r3, r5
 800409c:	2b0a      	cmp	r3, #10
 800409e:	d110      	bne.n	80040c2 <_putc_r+0x52>
 80040a0:	4622      	mov	r2, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	4630      	mov	r0, r6
 80040a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040aa:	f000 b85b 	b.w	8004164 <__swbuf_r>
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <_putc_r+0x64>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	d101      	bne.n	80040b8 <_putc_r+0x48>
 80040b4:	68b4      	ldr	r4, [r6, #8]
 80040b6:	e7e8      	b.n	800408a <_putc_r+0x1a>
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_putc_r+0x68>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	bf08      	it	eq
 80040be:	68f4      	ldreq	r4, [r6, #12]
 80040c0:	e7e3      	b.n	800408a <_putc_r+0x1a>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	701d      	strb	r5, [r3, #0]
 80040ca:	b2e8      	uxtb	r0, r5
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	bf00      	nop
 80040d0:	0800475c 	.word	0x0800475c
 80040d4:	0800477c 	.word	0x0800477c
 80040d8:	0800473c 	.word	0x0800473c

080040dc <__sread>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	460c      	mov	r4, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	f000 fa48 	bl	8004578 <_read_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	bfab      	itete	ge
 80040ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040ee:	89a3      	ldrhlt	r3, [r4, #12]
 80040f0:	181b      	addge	r3, r3, r0
 80040f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040f6:	bfac      	ite	ge
 80040f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80040fa:	81a3      	strhlt	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__swrite>:
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	461f      	mov	r7, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	05db      	lsls	r3, r3, #23
 8004108:	4605      	mov	r5, r0
 800410a:	460c      	mov	r4, r1
 800410c:	4616      	mov	r6, r2
 800410e:	d505      	bpl.n	800411c <__swrite+0x1e>
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f9b8 	bl	800448c <_lseek_r>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004126:	81a3      	strh	r3, [r4, #12]
 8004128:	4632      	mov	r2, r6
 800412a:	463b      	mov	r3, r7
 800412c:	4628      	mov	r0, r5
 800412e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	f000 b869 	b.w	8004208 <_write_r>

08004136 <__sseek>:
 8004136:	b510      	push	{r4, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413e:	f000 f9a5 	bl	800448c <_lseek_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	bf15      	itete	ne
 8004148:	6560      	strne	r0, [r4, #84]	; 0x54
 800414a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800414e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004152:	81a3      	strheq	r3, [r4, #12]
 8004154:	bf18      	it	ne
 8004156:	81a3      	strhne	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__sclose>:
 800415a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415e:	f000 b8d3 	b.w	8004308 <_close_r>
	...

08004164 <__swbuf_r>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	460e      	mov	r6, r1
 8004168:	4614      	mov	r4, r2
 800416a:	4605      	mov	r5, r0
 800416c:	b118      	cbz	r0, 8004176 <__swbuf_r+0x12>
 800416e:	6983      	ldr	r3, [r0, #24]
 8004170:	b90b      	cbnz	r3, 8004176 <__swbuf_r+0x12>
 8004172:	f7ff fc13 	bl	800399c <__sinit>
 8004176:	4b21      	ldr	r3, [pc, #132]	; (80041fc <__swbuf_r+0x98>)
 8004178:	429c      	cmp	r4, r3
 800417a:	d12a      	bne.n	80041d2 <__swbuf_r+0x6e>
 800417c:	686c      	ldr	r4, [r5, #4]
 800417e:	69a3      	ldr	r3, [r4, #24]
 8004180:	60a3      	str	r3, [r4, #8]
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	071a      	lsls	r2, r3, #28
 8004186:	d52e      	bpl.n	80041e6 <__swbuf_r+0x82>
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	b363      	cbz	r3, 80041e6 <__swbuf_r+0x82>
 800418c:	6923      	ldr	r3, [r4, #16]
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	6963      	ldr	r3, [r4, #20]
 8004194:	b2f6      	uxtb	r6, r6
 8004196:	4298      	cmp	r0, r3
 8004198:	4637      	mov	r7, r6
 800419a:	db04      	blt.n	80041a6 <__swbuf_r+0x42>
 800419c:	4621      	mov	r1, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f94a 	bl	8004438 <_fflush_r>
 80041a4:	bb28      	cbnz	r0, 80041f2 <__swbuf_r+0x8e>
 80041a6:	68a3      	ldr	r3, [r4, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60a3      	str	r3, [r4, #8]
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	6022      	str	r2, [r4, #0]
 80041b2:	701e      	strb	r6, [r3, #0]
 80041b4:	6963      	ldr	r3, [r4, #20]
 80041b6:	3001      	adds	r0, #1
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d004      	beq.n	80041c6 <__swbuf_r+0x62>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	07db      	lsls	r3, r3, #31
 80041c0:	d519      	bpl.n	80041f6 <__swbuf_r+0x92>
 80041c2:	2e0a      	cmp	r6, #10
 80041c4:	d117      	bne.n	80041f6 <__swbuf_r+0x92>
 80041c6:	4621      	mov	r1, r4
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f935 	bl	8004438 <_fflush_r>
 80041ce:	b190      	cbz	r0, 80041f6 <__swbuf_r+0x92>
 80041d0:	e00f      	b.n	80041f2 <__swbuf_r+0x8e>
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <__swbuf_r+0x9c>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d101      	bne.n	80041dc <__swbuf_r+0x78>
 80041d8:	68ac      	ldr	r4, [r5, #8]
 80041da:	e7d0      	b.n	800417e <__swbuf_r+0x1a>
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <__swbuf_r+0xa0>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	bf08      	it	eq
 80041e2:	68ec      	ldreq	r4, [r5, #12]
 80041e4:	e7cb      	b.n	800417e <__swbuf_r+0x1a>
 80041e6:	4621      	mov	r1, r4
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 f81f 	bl	800422c <__swsetup_r>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0cc      	beq.n	800418c <__swbuf_r+0x28>
 80041f2:	f04f 37ff 	mov.w	r7, #4294967295
 80041f6:	4638      	mov	r0, r7
 80041f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fa:	bf00      	nop
 80041fc:	0800475c 	.word	0x0800475c
 8004200:	0800477c 	.word	0x0800477c
 8004204:	0800473c 	.word	0x0800473c

08004208 <_write_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4c07      	ldr	r4, [pc, #28]	; (8004228 <_write_r+0x20>)
 800420c:	4605      	mov	r5, r0
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	2200      	movs	r2, #0
 8004214:	6022      	str	r2, [r4, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	f000 fa18 	bl	800464c <_write>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_write_r+0x1e>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	b103      	cbz	r3, 8004226 <_write_r+0x1e>
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20000be8 	.word	0x20000be8

0800422c <__swsetup_r>:
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <__swsetup_r+0xcc>)
 800422e:	b570      	push	{r4, r5, r6, lr}
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	4606      	mov	r6, r0
 8004234:	460c      	mov	r4, r1
 8004236:	b125      	cbz	r5, 8004242 <__swsetup_r+0x16>
 8004238:	69ab      	ldr	r3, [r5, #24]
 800423a:	b913      	cbnz	r3, 8004242 <__swsetup_r+0x16>
 800423c:	4628      	mov	r0, r5
 800423e:	f7ff fbad 	bl	800399c <__sinit>
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <__swsetup_r+0xd0>)
 8004244:	429c      	cmp	r4, r3
 8004246:	d10f      	bne.n	8004268 <__swsetup_r+0x3c>
 8004248:	686c      	ldr	r4, [r5, #4]
 800424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424e:	b29a      	uxth	r2, r3
 8004250:	0715      	lsls	r5, r2, #28
 8004252:	d42c      	bmi.n	80042ae <__swsetup_r+0x82>
 8004254:	06d0      	lsls	r0, r2, #27
 8004256:	d411      	bmi.n	800427c <__swsetup_r+0x50>
 8004258:	2209      	movs	r2, #9
 800425a:	6032      	str	r2, [r6, #0]
 800425c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <__swsetup_r+0xd4>)
 800426a:	429c      	cmp	r4, r3
 800426c:	d101      	bne.n	8004272 <__swsetup_r+0x46>
 800426e:	68ac      	ldr	r4, [r5, #8]
 8004270:	e7eb      	b.n	800424a <__swsetup_r+0x1e>
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <__swsetup_r+0xd8>)
 8004274:	429c      	cmp	r4, r3
 8004276:	bf08      	it	eq
 8004278:	68ec      	ldreq	r4, [r5, #12]
 800427a:	e7e6      	b.n	800424a <__swsetup_r+0x1e>
 800427c:	0751      	lsls	r1, r2, #29
 800427e:	d512      	bpl.n	80042a6 <__swsetup_r+0x7a>
 8004280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004282:	b141      	cbz	r1, 8004296 <__swsetup_r+0x6a>
 8004284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004288:	4299      	cmp	r1, r3
 800428a:	d002      	beq.n	8004292 <__swsetup_r+0x66>
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff fa5d 	bl	800374c <_free_r>
 8004292:	2300      	movs	r3, #0
 8004294:	6363      	str	r3, [r4, #52]	; 0x34
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	2300      	movs	r3, #0
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f043 0308 	orr.w	r3, r3, #8
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	b94b      	cbnz	r3, 80042c6 <__swsetup_r+0x9a>
 80042b2:	89a3      	ldrh	r3, [r4, #12]
 80042b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d003      	beq.n	80042c6 <__swsetup_r+0x9a>
 80042be:	4621      	mov	r1, r4
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f919 	bl	80044f8 <__smakebuf_r>
 80042c6:	89a2      	ldrh	r2, [r4, #12]
 80042c8:	f012 0301 	ands.w	r3, r2, #1
 80042cc:	d00c      	beq.n	80042e8 <__swsetup_r+0xbc>
 80042ce:	2300      	movs	r3, #0
 80042d0:	60a3      	str	r3, [r4, #8]
 80042d2:	6963      	ldr	r3, [r4, #20]
 80042d4:	425b      	negs	r3, r3
 80042d6:	61a3      	str	r3, [r4, #24]
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	b953      	cbnz	r3, 80042f2 <__swsetup_r+0xc6>
 80042dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80042e4:	d1ba      	bne.n	800425c <__swsetup_r+0x30>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	0792      	lsls	r2, r2, #30
 80042ea:	bf58      	it	pl
 80042ec:	6963      	ldrpl	r3, [r4, #20]
 80042ee:	60a3      	str	r3, [r4, #8]
 80042f0:	e7f2      	b.n	80042d8 <__swsetup_r+0xac>
 80042f2:	2000      	movs	r0, #0
 80042f4:	e7f7      	b.n	80042e6 <__swsetup_r+0xba>
 80042f6:	bf00      	nop
 80042f8:	20000120 	.word	0x20000120
 80042fc:	0800475c 	.word	0x0800475c
 8004300:	0800477c 	.word	0x0800477c
 8004304:	0800473c 	.word	0x0800473c

08004308 <_close_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4c06      	ldr	r4, [pc, #24]	; (8004324 <_close_r+0x1c>)
 800430c:	2300      	movs	r3, #0
 800430e:	4605      	mov	r5, r0
 8004310:	4608      	mov	r0, r1
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	f000 f964 	bl	80045e0 <_close>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_close_r+0x1a>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b103      	cbz	r3, 8004322 <_close_r+0x1a>
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	20000be8 	.word	0x20000be8

08004328 <__sflush_r>:
 8004328:	898a      	ldrh	r2, [r1, #12]
 800432a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800432e:	4605      	mov	r5, r0
 8004330:	0710      	lsls	r0, r2, #28
 8004332:	460c      	mov	r4, r1
 8004334:	d45a      	bmi.n	80043ec <__sflush_r+0xc4>
 8004336:	684b      	ldr	r3, [r1, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dc05      	bgt.n	8004348 <__sflush_r+0x20>
 800433c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	dc02      	bgt.n	8004348 <__sflush_r+0x20>
 8004342:	2000      	movs	r0, #0
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800434a:	2e00      	cmp	r6, #0
 800434c:	d0f9      	beq.n	8004342 <__sflush_r+0x1a>
 800434e:	2300      	movs	r3, #0
 8004350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004354:	682f      	ldr	r7, [r5, #0]
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	d033      	beq.n	80043c2 <__sflush_r+0x9a>
 800435a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	075a      	lsls	r2, r3, #29
 8004360:	d505      	bpl.n	800436e <__sflush_r+0x46>
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	1ac0      	subs	r0, r0, r3
 8004366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004368:	b10b      	cbz	r3, 800436e <__sflush_r+0x46>
 800436a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436c:	1ac0      	subs	r0, r0, r3
 800436e:	2300      	movs	r3, #0
 8004370:	4602      	mov	r2, r0
 8004372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004374:	6a21      	ldr	r1, [r4, #32]
 8004376:	4628      	mov	r0, r5
 8004378:	47b0      	blx	r6
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	d106      	bne.n	800438e <__sflush_r+0x66>
 8004380:	6829      	ldr	r1, [r5, #0]
 8004382:	291d      	cmp	r1, #29
 8004384:	d84b      	bhi.n	800441e <__sflush_r+0xf6>
 8004386:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <__sflush_r+0x10c>)
 8004388:	40ca      	lsrs	r2, r1
 800438a:	07d6      	lsls	r6, r2, #31
 800438c:	d547      	bpl.n	800441e <__sflush_r+0xf6>
 800438e:	2200      	movs	r2, #0
 8004390:	6062      	str	r2, [r4, #4]
 8004392:	04d9      	lsls	r1, r3, #19
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	6022      	str	r2, [r4, #0]
 8004398:	d504      	bpl.n	80043a4 <__sflush_r+0x7c>
 800439a:	1c42      	adds	r2, r0, #1
 800439c:	d101      	bne.n	80043a2 <__sflush_r+0x7a>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	b903      	cbnz	r3, 80043a4 <__sflush_r+0x7c>
 80043a2:	6560      	str	r0, [r4, #84]	; 0x54
 80043a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043a6:	602f      	str	r7, [r5, #0]
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d0ca      	beq.n	8004342 <__sflush_r+0x1a>
 80043ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d002      	beq.n	80043ba <__sflush_r+0x92>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff f9c9 	bl	800374c <_free_r>
 80043ba:	2000      	movs	r0, #0
 80043bc:	6360      	str	r0, [r4, #52]	; 0x34
 80043be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c2:	6a21      	ldr	r1, [r4, #32]
 80043c4:	2301      	movs	r3, #1
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b0      	blx	r6
 80043ca:	1c41      	adds	r1, r0, #1
 80043cc:	d1c6      	bne.n	800435c <__sflush_r+0x34>
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0c3      	beq.n	800435c <__sflush_r+0x34>
 80043d4:	2b1d      	cmp	r3, #29
 80043d6:	d001      	beq.n	80043dc <__sflush_r+0xb4>
 80043d8:	2b16      	cmp	r3, #22
 80043da:	d101      	bne.n	80043e0 <__sflush_r+0xb8>
 80043dc:	602f      	str	r7, [r5, #0]
 80043de:	e7b0      	b.n	8004342 <__sflush_r+0x1a>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ec:	690f      	ldr	r7, [r1, #16]
 80043ee:	2f00      	cmp	r7, #0
 80043f0:	d0a7      	beq.n	8004342 <__sflush_r+0x1a>
 80043f2:	0793      	lsls	r3, r2, #30
 80043f4:	680e      	ldr	r6, [r1, #0]
 80043f6:	bf08      	it	eq
 80043f8:	694b      	ldreq	r3, [r1, #20]
 80043fa:	600f      	str	r7, [r1, #0]
 80043fc:	bf18      	it	ne
 80043fe:	2300      	movne	r3, #0
 8004400:	eba6 0807 	sub.w	r8, r6, r7
 8004404:	608b      	str	r3, [r1, #8]
 8004406:	f1b8 0f00 	cmp.w	r8, #0
 800440a:	dd9a      	ble.n	8004342 <__sflush_r+0x1a>
 800440c:	4643      	mov	r3, r8
 800440e:	463a      	mov	r2, r7
 8004410:	6a21      	ldr	r1, [r4, #32]
 8004412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004414:	4628      	mov	r0, r5
 8004416:	47b0      	blx	r6
 8004418:	2800      	cmp	r0, #0
 800441a:	dc07      	bgt.n	800442c <__sflush_r+0x104>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004422:	81a3      	strh	r3, [r4, #12]
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800442c:	4407      	add	r7, r0
 800442e:	eba8 0800 	sub.w	r8, r8, r0
 8004432:	e7e8      	b.n	8004406 <__sflush_r+0xde>
 8004434:	20400001 	.word	0x20400001

08004438 <_fflush_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	690b      	ldr	r3, [r1, #16]
 800443c:	4605      	mov	r5, r0
 800443e:	460c      	mov	r4, r1
 8004440:	b1db      	cbz	r3, 800447a <_fflush_r+0x42>
 8004442:	b118      	cbz	r0, 800444c <_fflush_r+0x14>
 8004444:	6983      	ldr	r3, [r0, #24]
 8004446:	b90b      	cbnz	r3, 800444c <_fflush_r+0x14>
 8004448:	f7ff faa8 	bl	800399c <__sinit>
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <_fflush_r+0x48>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d109      	bne.n	8004466 <_fflush_r+0x2e>
 8004452:	686c      	ldr	r4, [r5, #4]
 8004454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004458:	b17b      	cbz	r3, 800447a <_fflush_r+0x42>
 800445a:	4621      	mov	r1, r4
 800445c:	4628      	mov	r0, r5
 800445e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004462:	f7ff bf61 	b.w	8004328 <__sflush_r>
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <_fflush_r+0x4c>)
 8004468:	429c      	cmp	r4, r3
 800446a:	d101      	bne.n	8004470 <_fflush_r+0x38>
 800446c:	68ac      	ldr	r4, [r5, #8]
 800446e:	e7f1      	b.n	8004454 <_fflush_r+0x1c>
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <_fflush_r+0x50>)
 8004472:	429c      	cmp	r4, r3
 8004474:	bf08      	it	eq
 8004476:	68ec      	ldreq	r4, [r5, #12]
 8004478:	e7ec      	b.n	8004454 <_fflush_r+0x1c>
 800447a:	2000      	movs	r0, #0
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	bf00      	nop
 8004480:	0800475c 	.word	0x0800475c
 8004484:	0800477c 	.word	0x0800477c
 8004488:	0800473c 	.word	0x0800473c

0800448c <_lseek_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4c07      	ldr	r4, [pc, #28]	; (80044ac <_lseek_r+0x20>)
 8004490:	4605      	mov	r5, r0
 8004492:	4608      	mov	r0, r1
 8004494:	4611      	mov	r1, r2
 8004496:	2200      	movs	r2, #0
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f8b8 	bl	8004610 <_lseek>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_lseek_r+0x1e>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_lseek_r+0x1e>
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20000be8 	.word	0x20000be8

080044b0 <__swhatbuf_r>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	460e      	mov	r6, r1
 80044b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b8:	2900      	cmp	r1, #0
 80044ba:	b090      	sub	sp, #64	; 0x40
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	da07      	bge.n	80044d2 <__swhatbuf_r+0x22>
 80044c2:	2300      	movs	r3, #0
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	89b3      	ldrh	r3, [r6, #12]
 80044c8:	061a      	lsls	r2, r3, #24
 80044ca:	d410      	bmi.n	80044ee <__swhatbuf_r+0x3e>
 80044cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d0:	e00e      	b.n	80044f0 <__swhatbuf_r+0x40>
 80044d2:	aa01      	add	r2, sp, #4
 80044d4:	f000 f862 	bl	800459c <_fstat_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	dbf2      	blt.n	80044c2 <__swhatbuf_r+0x12>
 80044dc:	9a02      	ldr	r2, [sp, #8]
 80044de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044e6:	425a      	negs	r2, r3
 80044e8:	415a      	adcs	r2, r3
 80044ea:	602a      	str	r2, [r5, #0]
 80044ec:	e7ee      	b.n	80044cc <__swhatbuf_r+0x1c>
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	2000      	movs	r0, #0
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	b010      	add	sp, #64	; 0x40
 80044f6:	bd70      	pop	{r4, r5, r6, pc}

080044f8 <__smakebuf_r>:
 80044f8:	898b      	ldrh	r3, [r1, #12]
 80044fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044fc:	079d      	lsls	r5, r3, #30
 80044fe:	4606      	mov	r6, r0
 8004500:	460c      	mov	r4, r1
 8004502:	d507      	bpl.n	8004514 <__smakebuf_r+0x1c>
 8004504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	2301      	movs	r3, #1
 800450e:	6163      	str	r3, [r4, #20]
 8004510:	b002      	add	sp, #8
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	ab01      	add	r3, sp, #4
 8004516:	466a      	mov	r2, sp
 8004518:	f7ff ffca 	bl	80044b0 <__swhatbuf_r>
 800451c:	9900      	ldr	r1, [sp, #0]
 800451e:	4605      	mov	r5, r0
 8004520:	4630      	mov	r0, r6
 8004522:	f7ff f961 	bl	80037e8 <_malloc_r>
 8004526:	b948      	cbnz	r0, 800453c <__smakebuf_r+0x44>
 8004528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452c:	059a      	lsls	r2, r3, #22
 800452e:	d4ef      	bmi.n	8004510 <__smakebuf_r+0x18>
 8004530:	f023 0303 	bic.w	r3, r3, #3
 8004534:	f043 0302 	orr.w	r3, r3, #2
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	e7e3      	b.n	8004504 <__smakebuf_r+0xc>
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <__smakebuf_r+0x7c>)
 800453e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	6020      	str	r0, [r4, #0]
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	9b00      	ldr	r3, [sp, #0]
 800454c:	6163      	str	r3, [r4, #20]
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	6120      	str	r0, [r4, #16]
 8004552:	b15b      	cbz	r3, 800456c <__smakebuf_r+0x74>
 8004554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004558:	4630      	mov	r0, r6
 800455a:	f000 f831 	bl	80045c0 <_isatty_r>
 800455e:	b128      	cbz	r0, 800456c <__smakebuf_r+0x74>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	431d      	orrs	r5, r3
 8004570:	81a5      	strh	r5, [r4, #12]
 8004572:	e7cd      	b.n	8004510 <__smakebuf_r+0x18>
 8004574:	0800391d 	.word	0x0800391d

08004578 <_read_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4c07      	ldr	r4, [pc, #28]	; (8004598 <_read_r+0x20>)
 800457c:	4605      	mov	r5, r0
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	2200      	movs	r2, #0
 8004584:	6022      	str	r2, [r4, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f000 f84a 	bl	8004620 <_read>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_read_r+0x1e>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	b103      	cbz	r3, 8004596 <_read_r+0x1e>
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000be8 	.word	0x20000be8

0800459c <_fstat_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4c07      	ldr	r4, [pc, #28]	; (80045bc <_fstat_r+0x20>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4605      	mov	r5, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	f000 f821 	bl	80045f0 <_fstat>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d102      	bne.n	80045b8 <_fstat_r+0x1c>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	b103      	cbz	r3, 80045b8 <_fstat_r+0x1c>
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	bf00      	nop
 80045bc:	20000be8 	.word	0x20000be8

080045c0 <_isatty_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4c06      	ldr	r4, [pc, #24]	; (80045dc <_isatty_r+0x1c>)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4605      	mov	r5, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	f000 f818 	bl	8004600 <_isatty>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_isatty_r+0x1a>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	b103      	cbz	r3, 80045da <_isatty_r+0x1a>
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	20000be8 	.word	0x20000be8

080045e0 <_close>:
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <_close+0xc>)
 80045e2:	2258      	movs	r2, #88	; 0x58
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ea:	4770      	bx	lr
 80045ec:	20000be8 	.word	0x20000be8

080045f0 <_fstat>:
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <_fstat+0xc>)
 80045f2:	2258      	movs	r2, #88	; 0x58
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295
 80045fa:	4770      	bx	lr
 80045fc:	20000be8 	.word	0x20000be8

08004600 <_isatty>:
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <_isatty+0xc>)
 8004602:	2258      	movs	r2, #88	; 0x58
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	2000      	movs	r0, #0
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000be8 	.word	0x20000be8

08004610 <_lseek>:
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <_lseek+0xc>)
 8004612:	2258      	movs	r2, #88	; 0x58
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	4770      	bx	lr
 800461c:	20000be8 	.word	0x20000be8

08004620 <_read>:
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <_read+0xc>)
 8004622:	2258      	movs	r2, #88	; 0x58
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	4770      	bx	lr
 800462c:	20000be8 	.word	0x20000be8

08004630 <_sbrk>:
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <_sbrk+0x14>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	4602      	mov	r2, r0
 8004636:	b909      	cbnz	r1, 800463c <_sbrk+0xc>
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <_sbrk+0x18>)
 800463a:	6019      	str	r1, [r3, #0]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	4402      	add	r2, r0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	4770      	bx	lr
 8004644:	20000350 	.word	0x20000350
 8004648:	20000bec 	.word	0x20000bec

0800464c <_write>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <_write+0xc>)
 800464e:	2258      	movs	r2, #88	; 0x58
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	4770      	bx	lr
 8004658:	20000be8 	.word	0x20000be8

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
